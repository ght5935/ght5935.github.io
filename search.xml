<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>写一个柯里化</title>
      <link href="/2021/03/29/write-1/"/>
      <url>/2021/03/29/write-1/</url>
      
        <content type="html"><![CDATA[<h2 id="柯里化🍏"><a href="#柯里化🍏" class="headerlink" title="柯里化🍏"></a>柯里化🍏</h2><p>柯里化通常也称部分求值，其含义是给函数分步传递参数，每次传递参数后部分应用参数，并返回一个更具体的函数接受剩下的参数，这中间可嵌套多层这样的接受部分参数函数，直至返回最后结果。<br>如果要实现下面这个方法:<br><code>add(1, 2)(3)(4)(5, 6, 7)(9)()</code><br>上面这个函数当参数为空的时候执行了内部参数所有值的相加，所以我们应该考虑当参数不为空的时候将缓存起来，在为空的时候再相加，这样的思路会用闭包的方式来实现。下面是实现方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 缓存所有的arguments值</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 新建fn函数实现柯里化</span>    <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果参数为空，那么递归停止，返回执行结果</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 否则将参数保存到args里面，返回fn方法</span>             args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>             <span class="token keyword">return</span> fn         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fn<span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 37</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 手写系列🍏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css 盒子模型</title>
      <link href="/2021/03/25/css-1/"/>
      <url>/2021/03/25/css-1/</url>
      
        <content type="html"><![CDATA[<h2 id="css-盒子模型（box-model）"><a href="#css-盒子模型（box-model）" class="headerlink" title="css 盒子模型（box model）"></a>css 盒子模型（box model）</h2><blockquote><ul><li>所有的html元素都可以看作盒子，在css中，”box model” 这一术语是用来布局的时候用的；css 盒子模型本质就是一个盒子，封装周围的html元素，他包括:外边距<code>margin</code>,边框（<code>boder</code>）,内边距（<code>padding</code>）， 实际内容（<code>content</code>）这四个属性</li></ul></blockquote><h2 id="W3C盒子模型（标准盒子模型）和IE盒子模型（怪异盒模型）"><a href="#W3C盒子模型（标准盒子模型）和IE盒子模型（怪异盒模型）" class="headerlink" title="W3C盒子模型（标准盒子模型）和IE盒子模型（怪异盒模型）"></a>W3C盒子模型（标准盒子模型）和IE盒子模型（怪异盒模型）</h2><h3 id="标准盒子模型"><a href="#标准盒子模型" class="headerlink" title="标准盒子模型"></a>标准盒子模型</h3><blockquote><ul><li>元素的内容占据的空间是由width属性设置的，而内容周围的padding和border值是另外计算的，即在标准模式下的盒模型</li><li>盒子实际内容（content）的width/height=我们设置的width/height</li><li>盒子总宽度/高度=width/height+padding+border+margin。</li></ul></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">20</span>px solid black<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="IE盒子模型（怪异盒模型）"><a href="#IE盒子模型（怪异盒模型）" class="headerlink" title="IE盒子模型（怪异盒模型）"></a>IE盒子模型（怪异盒模型）</h3><blockquote><ul><li>在怪异盒模型的情况下，浏览器的width属性不是内容的宽度，而是内容，内边距和边框的宽度的总和，即使在怪异模式下的盒模型</li><li>盒子的（content）宽度+内边距padding+边框border 宽度= 我们设置的width（height也是如此）。</li><li>盒子总宽度/高度=width/height +margin = 内容区宽度/高度+padding+border+margin.</li></ul></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">20</span>px solid black<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="怪异盒模型和标准和模型的兼容性问题"><a href="#怪异盒模型和标准和模型的兼容性问题" class="headerlink" title="怪异盒模型和标准和模型的兼容性问题"></a>怪异盒模型和标准和模型的兼容性问题</h2><p>建议不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素</p><h2 id="css-指定盒子模型的种类"><a href="#css-指定盒子模型的种类" class="headerlink" title="css 指定盒子模型的种类"></a>css 指定盒子模型的种类</h2><blockquote><ul><li><code>box-sizing</code> 属性允特定的方式定义匹配某个区域的特定的元素；</li><li><code>box-sizing:content-box</code>//宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框；</li><li><code>box-sizing:border-box</code>// 为元素设定的宽度和高度决定了元素的边框盒，也就说：为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制，通过从已设定的宽度和高度分别减去边框盒内边距才能得到内容的宽度和高度</li><li><code>box-sizing:inherit</code>:// 规定应从父元素继承box-sizing属性值；</li></ul></blockquote><p>box-sizing属性可以指定盒子模型种类：content-box指定盒子模型为W3C（标准和模型），border-box为IE盒子模型（怪异盒模型）</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2021/03/24/js-12/"/>
      <url>/2021/03/24/js-12/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包是什么"><a href="#闭包是什么" class="headerlink" title="闭包是什么"></a>闭包是什么</h2><blockquote><ul><li>在 JS 忍者秘籍(P90)中对闭包的定义：闭包允许函数访问并操作函数外部的变量。</li><li>红宝书上对于闭包的定义：闭包是指有权访问另外一个函数作用域中的变量的函数。</li><li>MDN 对闭包的定义为：闭包是指那些能够访问自由变量的函数。这里的自由变量是外部函数作用域中的变量</li></ul></blockquote><p>概述上面的话，<code>闭包是指有权访问另一个函数作用域中变量的函数</code></p><h2 id="形成闭包的原因"><a href="#形成闭包的原因" class="headerlink" title="形成闭包的原因"></a>形成闭包的原因</h2><p>内部的函数存在外部作用域的引用就会导致闭包。从上面介绍的上级作用域的概念中其实就有闭包的例子<br> <code>return fn</code>就是一个表现形式。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span><span class="token number">14</span>    <span class="token keyword">function</span> <span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里的子函数<code>fo</code>内存就存在外部作用域的引用 <code>a</code>, <code>b</code>，所以这就会产生闭包</p><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><blockquote><ul><li>保护函数的私有变量不受外部的干扰。形成不销毁的栈内存。</li><li>保存，把一些函数内的值保存下来。闭包可以实现方法和属性的私有化</li></ul></blockquote><h2 id="闭包经典使用场景"><a href="#闭包经典使用场景" class="headerlink" title="闭包经典使用场景"></a>闭包经典使用场景</h2><h3 id="1-return-一个函数"><a href="#1-return-一个函数" class="headerlink" title="1. return 一个函数"></a>1. <code>return</code> 一个函数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> n <span class="token operator">=</span><span class="token number">20</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       n<span class="token operator">++</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> f<span class="token punctuation">}</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 21</span></code></pre><p>这里的 return f, <strong>f()就是一个闭包</strong>，<code>存在上级作用域的引用</code>。</p><h3 id="2-函数作为参数"><a href="#2-函数作为参数" class="headerlink" title="2. 函数作为参数"></a>2. 函数作为参数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'小菜'</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'菜菜'</span>    <span class="token keyword">function</span> <span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fo<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'f'</span>    <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">*</span> 输出<span class="token operator">*</span>   菜菜<span class="token operator">/</span> </code></pre><p>使用 return fo 返回回来，<strong>fo() 就是闭包</strong>，<code>f(foo()) 执行的参数就是函数 fo</code>，因为 fo() 中的 a 的上级作用域就是函数foo()，所以输出就是<strong>菜菜</strong></p><h3 id="3-IIFE（自执行函数）"><a href="#3-IIFE（自执行函数）" class="headerlink" title="3. IIFE（自执行函数）"></a>3. IIFE（自执行函数）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'小菜'</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">*</span> 输出<span class="token operator">*</span>   小菜<span class="token operator">/</span> </code></pre><p>同样也是产生了<code>闭包f()</code>，存在 <code>window</code>下的引用 a。</p><h3 id="4-循环赋值"><a href="#4-循环赋值" class="headerlink" title="4. 循环赋值"></a>4. 循环赋值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>因为存在闭包的原因上面能依次输出1~10，闭包形成了10个互不干扰的私有作用域。将外层的自执行函数去掉后就不存在外部作用域的引用了，输出的结果就是连续的 10。为什么会连续输出10，因为 JS 是单线程的遇到异步的代码不会先执行(会入栈)，等到同步的代码执行完 <code>i++</code> 到 10时，异步代码才开始执行此时的 <code>i=10</code> 输出的都是 10</p><h3 id="5-使用回调函数就是在使用闭包"><a href="#5-使用回调函数就是在使用闭包" class="headerlink" title="5. 使用回调函数就是在使用闭包"></a>5. 使用回调函数就是在使用闭包</h3><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'小菜'</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></code></pre><h2 id="使用闭包需要注意什么"><a href="#使用闭包需要注意什么" class="headerlink" title="使用闭包需要注意什么"></a>使用闭包需要注意什么</h2><p>容易导致内存泄漏。闭包会携带包含其它的函数作用域，因此会比其他函数占用更多的内存。过度使用闭包会导致内存占用过多，所以要谨慎使用闭包。</p><h2 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h2><blockquote><ul><li>for 循环和闭包(号称必刷题)</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">*</span> 输出    <span class="token number">3</span>    <span class="token number">3</span>    <span class="token number">3</span><span class="token operator">/</span></code></pre><p>这里的<code>i</code> 是全局下的 <code>i</code>，共用一个作用域，当函数被执行的时候这时的 <code>i=3</code>，导致输出的结构都是3。</p><h3 id="1-写法1：自执行函数和闭包"><a href="#1-写法1：自执行函数和闭包" class="headerlink" title="1. 写法1：自执行函数和闭包"></a>1. 写法1：自执行函数和闭包</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-写法2：使用-let"><a href="#2-写法2：使用-let" class="headerlink" title="2. 写法2：使用 let"></a>2. 写法2：使用 let</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>let</code> 具有块级作用域，形成的3个私有作用域都是互不干扰的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonJs和Es Module及它们的区别</title>
      <link href="/2021/03/16/t-6/"/>
      <url>/2021/03/16/t-6/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么会有CommonJs和Es-Module呢"><a href="#为什么会有CommonJs和Es-Module呢" class="headerlink" title="为什么会有CommonJs和Es Module呢"></a>为什么会有CommonJs和Es Module呢</h2><p>我们都知道在早期JavaScript模块这一概念，都是通过script标签引入js文件代码。当然这写基本简单需求没有什么问题，但当我们的项目越来越庞大时，我们引入的js文件就会越多，这时就会出现以下问题：</p><blockquote><ul><li>js文件作用域都是顶层，这会造成变量污染</li><li>js文件多，变得不好维护</li><li>js文件依赖问题，稍微不注意顺序引入错，代码全报错</li></ul></blockquote><p>为了解决以上问题JavaScript社区出现了<code>CommonJs</code>，<code>CommonJs</code>是一种模块化的规范，包括现在的NodeJs里面也采用了部分CommonJs语法在里面。那么在后来Es6版本正式加入了<code>Es Module</code>模块，这两种都是解决上面问题，那么都是解决什么问题呢。</p><blockquote><ul><li>解决变量污染问题，每个文件都是独立的作用域，所以不存在变量污染</li><li>解决代码维护问题，一个文件里代码非常清晰</li><li>解决文件依赖问题，一个文件里可以清楚的看到依赖了那些其它文件</li></ul></blockquote><h2 id="CommonJs-基本语法"><a href="#CommonJs-基本语法" class="headerlink" title="CommonJs 基本语法"></a>CommonJs 基本语法</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p><code>CommonJs</code>中使用<code>module.exports</code>导出变量及函数，也可以导出任意类型的值，看如下案例。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导出一个对象</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"小菜"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> <span class="token string">"male"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 导出任意值</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小菜"</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token keyword">null</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> undefined</code></pre><h3 id="直接导出"><a href="#直接导出" class="headerlink" title="直接导出"></a>直接导出</h3><p>导出也可以省略<code>module</code>关键字，直接写<code>exports</code>导出也可以，看如下案例</p><pre class=" language-js"><code class="language-js">exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小菜"</span>exports<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"male"</span></code></pre><p>注意：如果使用exports导出单个值之后，就不能在导出一个对象值，这只会修改exports的对象改变，然而修改无效，最终导出还是name，和sex，因为最终的导出是由module.exports决定的。</p><pre class=" language-js"><code class="language-js">exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小菜"</span>exports<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"male"</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"小菜"</span><span class="token punctuation">}</span></code></pre><p>这种情况会改变对象的引用值则导出无效，所以最后导出的还是<code>name</code>，<code>sex</code>。</p><h3 id="混合导出"><a href="#混合导出" class="headerlink" title="混合导出"></a>混合导出</h3><p>混合导出，<code>exports</code>和<code>module.exports</code>可以同时使用，不会存在问题。</p><pre class=" language-js"><code class="language-js">exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小菜"</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">26</span></code></pre><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p><code>CommonJs</code>中使用<code>require</code>语法可以导入，如果想要单个的值，可以通过解构对象来获取</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小菜"</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">26</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./index.js"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { name: "小菜", age: 26 }</span></code></pre><h3 id="重复导入"><a href="#重复导入" class="headerlink" title="重复导入"></a>重复导入</h3><p>不管是<code>CommonJs</code>还是<code>Es Module</code>都不会重复导入，就是只要该文件内加载过一次这个文件了，我<code>再次导入一次是不会生效</code>的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./index.js"</span><span class="token punctuation">)</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./index.js"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不会在执行了</span></code></pre><h3 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h3><p><code>CommonJs</code>支持动态导入，什么意思呢，就是可以在语句中，使用<code>require</code>语法，来看如下案例</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"./index.js"</span><span class="token punctuation">,</span> <span class="token string">"./config.js"</span><span class="token punctuation">]</span>lists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 动态导入</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">require</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 动态导入</span><span class="token punctuation">}</span></code></pre><h3 id="导入值的变化"><a href="#导入值的变化" class="headerlink" title="导入值的变化"></a>导入值的变化</h3><p><code>CommonJs</code>导入的值是拷贝的，所以可以修改拷贝值，但这会引起变量污染，一不小心就重名</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    num<span class="token punctuation">,</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token operator">++</span> num     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span> num<span class="token punctuation">,</span> add <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./index.js"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>num <span class="token operator">=</span> <span class="token number">100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 100</span></code></pre><p>上面example中，可以看到<code>exports</code>导出的值是值的拷贝，更改完<code>++ num</code>值没有发生变化，并且导入的<code>num</code>的值我们也可以进行修改</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>CommonJs</code>解决了变量污染，文件依赖等问题，上面我们也介绍了它的基本语法，它可以动态导入(代码发生在运行时)，不可以重复导入</p><h2 id="Es-Module-基本语法"><a href="#Es-Module-基本语法" class="headerlink" title="Es Module 基本语法"></a>Es Module 基本语法</h2><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><p>在<code>Es Module</code>中导出分为两种，单个导出(<code>export</code>)、默认导出(<code>export default</code>)，单个导出在导入时不像<code>CommonJs</code>一样直接把值全部导入进来了，<code>Es Module</code>中可以导入我想要的值。那么默认导出就是全部直接导入进来，当然<code>Es Module</code>中也可以导出任意类型的值。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导出变量</span><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"小菜"</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token comment" spellcheck="true">// 导出函数也可以</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 另一种形式导出</span><span class="token keyword">const</span> sex <span class="token operator">=</span> <span class="token string">"male"</span><span class="token keyword">export</span> sex<span class="token comment" spellcheck="true">// 如果有多个的话</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"小菜"</span><span class="token keyword">const</span> sex <span class="token operator">=</span> <span class="token string">"male"</span><span class="token keyword">export</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> sex <span class="token punctuation">}</span></code></pre><h3 id="混合导出-1"><a href="#混合导出-1" class="headerlink" title="混合导出"></a>混合导出</h3><p>可以使用<code>export</code>和<code>export default</code>同时使用并且互不影响，只需要在导入时地方注意，如果文件里有混合导入，则必须先导入默认导出的，在导入单个导入的值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"小菜"</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    msg<span class="token punctuation">:</span> <span class="token string">"hello 小菜"</span><span class="token punctuation">}</span></code></pre><h3 id="export和export-default的区别"><a href="#export和export-default的区别" class="headerlink" title="export和export default的区别"></a>export和export default的区别</h3><blockquote><ul><li>1.export default 用于规定模块的默认对外接口</li><li>2.很显然默认对外接口只能有一个，所以 export default 在同一个模块中只能出现一次</li><li>3.export default只能直接输出，不能先定义再输出。</li><li>4.其在 import 方式上也和 export 存在一定区别</li></ul></blockquote><p>export的输出与import输入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token punctuation">{</span>output<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./index.js'</span></code></pre><p>export default的输出与import输入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">import</span> output <span class="token keyword">from</span> <span class="token string">'./index.js'</span></code></pre><p>从以上两种 import 方式即可看出，export default 的 import 方式不需要使用大括号包裹。因为对于 export default 其输出的本来就只有一个接口，提供的是模块的默认接口，自然不需要使用大括号包裹</p><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><p><code>Es Module</code>使用的是<code>import</code>语法进行导入。如果要单个导入则必须使用花括号<code>{}</code> ，注意：这里的花括号跟解构不一样。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index,js</span><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"小菜"</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token keyword">import</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./index.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "小菜" 26</span><span class="token comment" spellcheck="true">// 如果里面全是单个导出，我们就想全部直接导入则可以这样写</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> all <span class="token keyword">from</span> <span class="token string">'./index.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name: "小菜", age: 26}</span></code></pre><h3 id="混合导入"><a href="#混合导入" class="headerlink" title="混合导入"></a>混合导入</h3><p>混合导入，则该文件内用到混合导入，<code>import</code>语句必须先是默认导出，后面再是单个导出，顺序一定要正确否则报错。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index,js</span><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"小菜"</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">:</span> <span class="token string">"小菜"</span><span class="token punctuation">}</span><span class="token keyword">import</span> msg<span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./index.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { msg: "小菜" }</span></code></pre><h3 id="导入值的变化-1"><a href="#导入值的变化-1" class="headerlink" title="导入值的变化"></a>导入值的变化</h3><p><code>export</code>导出的值是值的引用，并且内部有映射关系，这是<code>export</code>关键字的作用。而且导入的值，不能进行修改也就是只读状态。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">export</span> <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">++</span> num<span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token punctuation">{</span> num<span class="token punctuation">,</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./index.js"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>num <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// 抛出错误</span></code></pre><h3 id="Es-Module是静态"><a href="#Es-Module是静态" class="headerlink" title="Es Module是静态"></a>Es Module是静态</h3><p>就是<code>Es Module</code>语句<code>import只能声明在该文件的最顶部，不能动态加载语句，Es Module</code>语句运行在代码编译时。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">import</span> xxx <span class="token keyword">from</span> <span class="token string">'XXX'</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token punctuation">}</span></code></pre><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><code>Es Module</code>也是解决了变量污染问题，依赖顺序问题，<code>Es Module</code>语法也是更加灵活，导出值也都是导出的引用，导出变量是可读状态，这加强了代码可读性。</p><h2 id="CommonJs和Es-Module的区别"><a href="#CommonJs和Es-Module的区别" class="headerlink" title="CommonJs和Es Module的区别"></a>CommonJs和Es Module的区别</h2><h3 id="CommonJs"><a href="#CommonJs" class="headerlink" title="CommonJs"></a>CommonJs</h3><blockquote><ul><li>CommonJs可以动态加载语句，代码发生在运行时</li><li>CommonJs混合导出，还是一种语法，只不过不用声明前面对象而已，当我导出引用对象时之前的导出就被覆盖了</li><li>CommonJs导出值是拷贝，可以修改导出的值，这在代码出错时，不好排查引起变量污染</li></ul></blockquote><h3 id="Es-Module"><a href="#Es-Module" class="headerlink" title="Es Module"></a>Es Module</h3><blockquote><ul><li>Es Module是静态的，不可以动态加载语句，只能声明在该文件的最顶部，代码发生在编译时</li><li>Es Module混合导出，单个导出，默认导出，完全互不影响</li><li>Es Module导出是引用值之前都存在映射关系，并且值都是可读的，不能修改</li></ul></blockquote><p>来源：<a href="https://juejin.cn/post/6938581764432461854" target="_blank" rel="noopener">掘金</a><br>作者：蛙人</p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>delete的用法</title>
      <link href="/2021/03/15/t-5/"/>
      <url>/2021/03/15/t-5/</url>
      
        <content type="html"><![CDATA[<p>delete 是项目中使用频率并不很高的一个操作，书上写delete操作符要谨慎使用，因为大多数现代js引擎会针对构造函数创建的实例进行性能优化，而delete会破坏这种优化。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>看下题最后输出的是什么</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span> obj    <span class="token keyword">return</span> obj<span class="token punctuation">}</span><span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'小菜'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>delete</code> 操作符用于<code>删除对象的某个属性</code>；如果没有指向这个属性的引用，那它最终会被释放   </p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>直接使用delete操作符</p><pre class=" language-js"><code class="language-js"><span class="token keyword">delete</span> object<span class="token punctuation">.</span>property<span class="token keyword">delete</span> object<span class="token punctuation">[</span><span class="token string">'property'</span><span class="token punctuation">]</span></code></pre><p>例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'小菜'</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>nameconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {age: 18}</span></code></pre><p><code>返回值</code>：对于所有情况都是true，即使是删除不存在的属性也会返回true，还是如上代码，不防打印一下返回值看看<br>除非属性是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" target="_blank" rel="noopener">自身的</a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_delete" target="_blank" rel="noopener">不可配置</a>的属性，在这种情况下，非严格模式返回 false。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>job<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//即使删除对象不存在的属性依然返回true</span></code></pre><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><h3 id="1-对象属性不存在"><a href="#1-对象属性不存在" class="headerlink" title="1. 对象属性不存在"></a>1. 对象属性不存在</h3><p>如上所述，如果删除对象不存在的属性，delete无效，但是返回值仍然为true</p><h3 id="2-delete-和原型链"><a href="#2-delete-和原型链" class="headerlink" title="2. delete 和原型链"></a>2. delete 和原型链</h3><p>如果delete操作符删除属性成功，则该属性将永远不存在，但是该对象原型链上存在该同名属性，则该对象会从原型链上继承该同名属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小菜"</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> <span class="token string">"工程师"</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"菜菜"</span><span class="token comment" spellcheck="true">// 创建实例对象</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只删除p实例的name属性</span><span class="token keyword">delete</span> p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过打印，name属性成功删除,不能删除原型链上的属性</span><span class="token comment" spellcheck="true">/*    Person { job: "工程师" }    job: "工程师"    __proto__:        name: "菜菜"        constructor: ƒ Person()        __proto__: Object*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 菜菜</span></code></pre><p>注意：只对对象自身属性起作用，不能删除原型链上的属性</p><h3 id="3-不可设置的属性"><a href="#3-不可设置的属性" class="headerlink" title="3.不可设置的属性"></a>3.不可设置的属性</h3><p>Math, Array, Object等内置对象的属性不可删除</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">delete</span> Array<span class="token punctuation">.</span>lengthconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">0</span></code></pre><p>需要注意的是，只是这些内置对象的属性不可删除，内置对象的方法是可以删除的，比如:</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>forEach<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内置函数</span><span class="token keyword">delete</span> Array<span class="token punctuation">.</span>forEach <span class="token comment" spellcheck="true">// 不用区分严格模式与否</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>forEach<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><blockquote><ul><li>使用 var 声明的属性都是不可配置的， delete 不能删除<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'小菜'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 小菜</span><span class="token keyword">delete</span> strconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 小菜</span></code></pre></li><li>let和const声明的属性<br>任何用let或const声明的属性不能够从它被声明的作用域中删除，我试了下，和var的效果是一样的</li></ul></blockquote><h3 id="3-delete-和数组"><a href="#3-delete-和数组" class="headerlink" title="3.delete 和数组"></a>3.delete 和数组</h3><p>使用delete操作符删除数组总某项元素时，被删除的元素会从该数组中删除，但是数组的length并不会改变</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*    (3) [1, empty, 3]    0: 1    2: 3    length: 3*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>根据MDN中in在array中的使用：i in array：i表示array中的数组属性或者索引。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><code>delete</code>删除属性<blockquote><ul><li>变量</li><li>delete 只对对象自身属性起作用，不能删除原型链上的属性</li><li>使用 var 声明的属性都是不可配置的， delete 不能删除</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个🍏🍏🍏</title>
      <link href="/2021/03/14/write-0/"/>
      <url>/2021/03/14/write-0/</url>
      
        <content type="html"><![CDATA[<h2 id="写一个call🍏"><a href="#写一个call🍏" class="headerlink" title="写一个call🍏"></a>写一个call🍏</h2><p>模拟一个call方法<a href="https://github.com/ght5935/StudyUp/blob/master/javascript/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97/1.%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAcall.js" target="_blank" rel="noopener">查看</a></p><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myCall <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 挂在一个fn函数</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>     <span class="token comment" spellcheck="true">// 执行该函数</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 删除该函数</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn    <span class="token comment" spellcheck="true">// 返回结果</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><h2 id="写一个apply🍏"><a href="#写一个apply🍏" class="headerlink" title="写一个apply🍏"></a>写一个apply🍏</h2><p>模拟一个apply方法<a href="https://github.com/ght5935/StudyUp/blob/master/javascript/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97/2.%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAapply.js" target="_blank" rel="noopener">查看</a></p><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myApply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 挂载一个函数</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> window    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 执行该函数</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> result<span class="token punctuation">;</span>    args <span class="token operator">?</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">:</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 删除该函数</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn        <span class="token comment" spellcheck="true">// 返回结果</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><h2 id="写一个bind🍏"><a href="#写一个bind🍏" class="headerlink" title="写一个bind🍏"></a>写一个bind🍏</h2><h2 id="柯里化🍏"><a href="#柯里化🍏" class="headerlink" title="柯里化🍏"></a>柯里化🍏</h2><p>柯里化通常也称部分求值，其含义是给函数分步传递参数，每次传递参数后部分应用参数，并返回一个更具体的函数接受剩下的参数，这中间可嵌套多层这样的接受部分参数函数，直至返回最后结果。<br>如果要实现下面这个方法:<br><code>add(1, 2)(3)(4)(5, 6, 7)(9)()</code><br>上面这个函数当参数为空的时候执行了内部参数所有值的相加，所以我们应该考虑当参数不为空的时候将缓存起来，在为空的时候再相加，这样的思路会用闭包的方式来实现。下面是实现方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 缓存所有的arguments值</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 新建fn函数实现柯里化</span>    <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果参数为空，那么递归停止，返回执行结果</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 否则将参数保存到args里面，返回fn方法</span>             args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>             <span class="token keyword">return</span> fn         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fn<span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 37</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 手写系列🍏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手写系列🍏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端监控和前端埋点</title>
      <link href="/2020/09/18/js-11/"/>
      <url>/2020/09/18/js-11/</url>
      
        <content type="html"><![CDATA[<p>前端监控和前端埋点，一个是目的，一个是实现方式，做前端埋点，是为了做前端监控，那为什么要做前端监控呢？</p><p>前端监控的目的是：</p><blockquote><ul><li>获取用户行为以及跟踪产品在用户端的使用情况，并以监控数据为基础，指明产品优化的方向。</li></ul></blockquote><h2 id="前端监控"><a href="#前端监控" class="headerlink" title="前端监控"></a>前端监控</h2><pre><code>前端监控可以分为三类：</code></pre><blockquote><ul><li>数据监控</li><li>性能监控</li><li>异常监控</li></ul></blockquote><h2 id="数据监控"><a href="#数据监控" class="headerlink" title="数据监控"></a>数据监控</h2><pre><code>数据监控，就是监听用户的行为，常见的监控项有：</code></pre><blockquote><ul><li>PV/UV:PV(page view)：即页面浏览量或点击量；UV：指访问某个站点或点击某条新闻的不同 IP 地址的人数</li><li>用户在每一个页面的停留时间</li><li>用户通过什么入口来访问该网页</li><li>用户在相应的页面中触发的行为<br>统计这些数据是有意义的，比如我们知道了用户来源的渠道，可以促进产品的推广，知道用户在每一个页面停留的时间，可以针对停留较长的页面，增加广告推送等等。</li></ul></blockquote><h2 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h2><p>性能监控指的是监听前端的性能，主要包括监听网页或者说产品在用户端的体验。常见的性能监控项包括：</p><blockquote><ul><li>不同用户，不同机型和不同系统下的首屏加载时间</li><li>白屏时间</li><li>http 等请求的响应时间</li><li>静态资源整体下载时间</li><li>页面渲染时间</li><li>页面交互动画完成时间</li></ul></blockquote><p>这些性能监控的结果，可以展示前端性能的好坏，根据性能监测的结果可以进一步的去优化前端性能，比如兼容低版本浏览器的动画效果，加快首屏加载等等。</p><h2 id="异常监控"><a href="#异常监控" class="headerlink" title="异常监控"></a>异常监控</h2><p>由于产品的前端代码在执行过程中也会发生异常，因此需要引入异常监控。及时的上报异常情况，可以避免线上故障的发上。虽然大部分异常可以通过 try catch 的方式捕获，但是比如内存泄漏以及其他偶现的异常难以捕获。常见的需要监控的异常包括：</p><blockquote><ul><li>Javascript 的异常监控</li><li>样式丢失的异常监控</li></ul></blockquote><h2 id="前端埋点"><a href="#前端埋点" class="headerlink" title="前端埋点"></a>前端埋点</h2><p>我们说完了前端监控的三个分类，现在就来聊聊怎么实现前端监控。实现前端监控，第一步肯定是将我们要监控的事项（数据）给收集起来，再提交给后台，最后进行数据分析。数据收集的丰富性和准确性会直接影响到我们做前端监控的质量，因为我们会以此为基础，为产品的未来发展指引方向。</p><p>收集监控数据我们是通过前端埋点来实现的，目前常见的前端埋点方法有三种：<code>手动埋点</code>、<code>可视化埋点</code>和<code>无埋点</code>。</p><h3 id="手动埋点"><a href="#手动埋点" class="headerlink" title="手动埋点"></a>手动埋点</h3><p>手动埋点，也叫代码埋点，即纯手动写代码，调用埋点 SDK 的函数，在需要埋点的业务逻辑功能位置调用接口，上报埋点数据，像友盟、百度统计等第三方数据统计服务商大都采用这种方案。</p><p>手动埋点让使用者可以方便地设置自定义属性、自定义事件；所以当你需要深入下钻，并精细化自定义分析时，比较适合使用手动埋点。</p><p>手动埋点的缺陷就是，项目工程量大，需要埋点的位置太多，而且需要产品开发运营之间相互反复沟通，容易出现手动差错，如果错误，重新埋点的成本也很高。这会导致整个数据收集周期变的很长，收集成本变的很高，而且效率很低。因为手动埋点需要开发人员完成，所以每次有埋点更新，或者漏埋点，都需要重新走上线发布流程，更新成本也高，对线上系统稳定性也有一定危害。</p><h3 id="可视化埋点"><a href="#可视化埋点" class="headerlink" title="可视化埋点"></a>可视化埋点</h3><p>通过可视化交互的手段，代替上述的代码埋点。将业务代码和埋点代码分离，提供一个可视化交互的页面，输入为业务代码，通过这个可视化系统，可以在业务代码中自定义的增加埋点事件等等，最后输出的代码耦合了业务代码和埋点代码。缺点就是可以埋点的控件有限，不能手动定制。</p><p>可视化埋点听起来比较高大上，实际上跟代码埋点还是区别不大。也就是用一个系统来实现手动插入代码埋点的过程。比如国外比较早做可视化的是 Mixpanel，国内较早支持可视化埋点的有TalkingData、诸葛 IO，2017年腾讯的 MTA 也宣布支持可视化埋点；相比于手动埋点更新困难，埋点成本高的问题，可视化埋点优化了移动运营中数据采集的流程，能够支持产品运营随时调整埋点，无需再走发版流程，直接把配置结果推入到前端，数据采集流程更简化，也更方便产品的迭代。</p><p>可视化埋点中多数基于Xpath的方案，XPath 是一门在 XML 文档中查找信息的语言，XPath 可用来在 XML 文档中对元素和属性进行遍历</p><h3 id="无埋点"><a href="#无埋点" class="headerlink" title="无埋点"></a>无埋点</h3><p> 无埋点则是前端自动采集全部事件，上报埋点数据，由后端来过滤和计算出有用的数据。优点是前端只要一次加载埋点脚本，缺点是流量和采集的数据过于庞大，服务器性能压力山大。</p><p>采用无埋点技术的有主流的 GrowingIO、神策。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在不同场景下我们需要选择不同的埋点方案。例如对于简单的用户行为类事件，可以使用全埋点解决；而对于需要携带大量运行时才可获知的业务字段的埋点需求，就需要声明式埋点来解决。</p><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><p>说完了理论的东西，我们来看点常见的核心代码实现。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS代码要不要加分号?</title>
      <link href="/2020/08/26/js-10/"/>
      <url>/2020/08/26/js-10/</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>前一段日子团队通过<code>ESLint + Prettier +StyleLint</code>刚刚统一了代码规范。我本地通过编辑器设置了保存时执行eslint fix，偶然的发现了一个报错…</p><p>根据提示，在每一个<code>[</code>前加一个<code>;</code>，果然没问题了。但是我们团队的代码规则是不需要分号的，我觉得这样很不美观。想知道报错的根本原因，（其实当时怀疑这是prettier的一个BUG），于是就继续探究了下去。 </p><h2 id="分号的作用"><a href="#分号的作用" class="headerlink" title="分号的作用"></a>分号的作用</h2><p>分号也是一个执行语句，叫做空语句，分号是断句用的，每一个分号就是一个程序语句结束的标志。<br>知乎上有一段比较可爱的代码。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>应该很容易看的看出<br>第一段输出的是<code>1,2,3,4,5</code><br>第二段输出的是<code>6</code><br>第二段for循环后面加了;后，for循环后面的代码块就和for循环没有关系了。而for循环的代码，全部都执行在了空语句;上面。<br>接下来再看下一段代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>这时候输出b的是<code>undefined</code>，并不是我以为的[<code>1,2,3]</code>。<br>原来在代码解析的时候，变成了  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>并没有通过换行符截断代码。<br>看来随处添加或者删除分号还是有风险的。但是为什么有的地方可以不加，有的地方不加分号却会报错呢？在查询这个问题的时候，发现了一个名词：<strong>Automatic Semicolon Insertion (ASI 自动插入分号机制)</strong>。下面会描述这个概念。</p><h2 id="分号的添加规则"><a href="#分号的添加规则" class="headerlink" title="分号的添加规则"></a>分号的添加规则</h2><p>除了以下的语句，JavaScript的每一个语句都应该加分号的。</p><blockquote><ul><li>循环语句: for, while</li><li>分支语句: if, switch, try</li><li>函数声明 (不是函数表达式)</li></ul></blockquote><p>原来除了这几个特殊的语句之外，所有的语句都应该加分号的，那我们团队的规则不就错了吗😱😱😱？憋捉急，接下来就是<code>ASI</code>登场了。</p><h2 id="ASI"><a href="#ASI" class="headerlink" title="ASI"></a>ASI</h2><p>自动插入分号机制…噢，顾名思义，那么应该是在代码解析的时候，解析器会自动插入我们忘记的分号呀！</p><p><strong>并不是！！！</strong>（啪啪啪的打脸声响起👏👏👏）</p><p>抽象语法树中并没有分号这个东西。插入分号只是一个概念，意思是解析器除了分号，还会把换行符当作断句的依据，从而保证语句解析的正确性，并不是真的往里插一个分号（当然了，你本地压缩代码的时候，emmm，应该是需要真的插入的）。</p><p>但是ASI并不是将所有的换行符都识别成分号，而是通过以下规则。</p><h3 id="ASI的插入规则"><a href="#ASI的插入规则" class="headerlink" title="ASI的插入规则"></a>ASI的插入规则</h3><p>大前提，ASI的纲领：</p><p>以换行为基础。（就是你肯定得有换行符才行）</p><p>JS解析器是尽量把语句合并成同一行的解析的。只有符合ASI规则的时候，才会加入分号进行断句。</p><h4 id="1、新行并入当前行将构成非法语句，自动插入分号。"><a href="#1、新行并入当前行将构成非法语句，自动插入分号。" class="headerlink" title="1、新行并入当前行将构成非法语句，自动插入分号。"></a>1、新行并入当前行将构成非法语句，自动插入分号。</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 解析为</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个代码就清楚了解释了纲领。<br><strong>必须存在换行符</strong>。你写成一行<code>if(true) a = 1 console.log(a)</code>直接就报错了。<br><strong>尽量并为一行</strong>。并没有解析成如下代码。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为第二行并入第一行没有构成非法语句。</p><h4 id="2、在continue-return-break-throw后自动插入分号。"><a href="#2、在continue-return-break-throw后自动插入分号。" class="headerlink" title="2、在continue, return, break, throw后自动插入分号。"></a>2、在continue, return, break, throw后自动插入分号。</h4><p>这些语句后面的换行符会自动插入分号的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">return</span><span class="token number">123</span><span class="token comment" spellcheck="true">// 解析为</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>这种写法就return了个寂寞。这就是为什么在返回大量代码的时候喜欢让你在 return后面加一个<code>()</code>包裹着你的返回内容。  </p><h4 id="3、-、–后缀表达式作为新行的开始，在行首自动插入分号"><a href="#3、-、–后缀表达式作为新行的开始，在行首自动插入分号" class="headerlink" title="3、++、–后缀表达式作为新行的开始，在行首自动插入分号"></a>3、++、–后缀表达式作为新行的开始，在行首自动插入分号</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>a<span class="token operator">++</span>b<span class="token comment" spellcheck="true">// 解析成了</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>a<span class="token punctuation">;</span><span class="token operator">++</span>b<span class="token punctuation">;</span></code></pre><p>如果你本身就想写<code>++b</code>那还好点，但是如果你的本意是<code>a++</code>呢。结果却是b自增了。这也是为什么很多的代码规则里不建议你用<code>++,--</code>，而是用 <code>+=1,-=1</code>。</p><h4 id="4、当出现一个不允许的行终止符或-时，会在其之前插入一个分号。"><a href="#4、当出现一个不允许的行终止符或-时，会在其之前插入一个分号。" class="headerlink" title="4、当出现一个不允许的行终止符或}时，会在其之前插入一个分号。"></a>4、当出现一个不允许的行终止符或<code>}</code>时，会在其之前插入一个分号。</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 解析成了</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><strong>接下来我们就得知道什么情况下不会触发ASI了</strong><br>就一句<br><strong>新的一行以(， [， /， +， -， *， %， ,， .开头</strong><br>因为这些符号开头的话，根据上述的ASI的第一条规则，这一行和上一行并成一行的时候，并不会形成非法语句。例如[]会被识别成属性。<code>()</code>会被识别成函数执行语句。</p><p>解决方法就是在新一行的开始，手动加一个分号即可。</p><h2 id="ASI会不会影响代码的效率呀"><a href="#ASI会不会影响代码的效率呀" class="headerlink" title="ASI会不会影响代码的效率呀"></a>ASI会不会影响代码的效率呀</h2><p>解析的时候应该会有一点点点点点点的影响吧，执行的时候都一样，没啥影响。但是现在项目都是本地打包压缩好的。所以大部分情况下不用考虑这些问题，跟着团队规范走就行了。</p><h2 id="那么到底应该加不加分号呢？"><a href="#那么到底应该加不加分号呢？" class="headerlink" title="那么到底应该加不加分号呢？"></a>那么到底应该加不加分号呢？</h2><p>上面说的这么多其实和代码规范没有关系，讲的是ASI机制。加不加分号一看个人习惯喜好，二看团队要求。规范上加不加并没有对错之分，但是你都要对ASI了解。</p><p>来源：<a href="https://juejin.im/post/6864135607468163079" target="_blank" rel="noopener">掘金</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack面试题</title>
      <link href="/2020/08/19/webpack-1/"/>
      <url>/2020/08/19/webpack-1/</url>
      
        <content type="html"><![CDATA[<h2 id="0-有哪些常见的Loader？你用过哪些Loader？"><a href="#0-有哪些常见的Loader？你用过哪些Loader？" class="headerlink" title="0.有哪些常见的Loader？你用过哪些Loader？"></a>0.有哪些常见的Loader？你用过哪些Loader？</h2><blockquote><ul><li>raw-loader：加载文件原始内容（utf-8）</li><li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)</li><li>url-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)</li><li>source-map-loader：加载额外的 Source Map 文件，以方便断点调试</li><li>svg-inline-loader：将压缩后的 SVG 内容注入代码中</li><li>image-loader：加载并且压缩图片文件</li><li>json-loader 加载 JSON 文件（默认包含）</li><li>handlebars-loader: 将 Handlebars 模版编译成函数并返回</li><li>babel-loader：把 ES6 转换成 ES5</li><li>ts-loader: 将 TypeScript 转换成 JavaScript</li><li>awesome-typescript-loader：将 TypeScript 转换成 JavaScript，性能优于 ts-loader</li><li>sass-loader：将SCSS/SASS代码转换成CSS</li><li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</li><li>style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS</li><li>postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀</li><li>eslint-loader：通过 ESLint 检查 JavaScript 代码</li><li>tslint-loader：通过 TSLint检查 TypeScript 代码</li><li>mocha-loader：加载 Mocha 测试用例的代码</li><li>coverjs-loader：计算测试的覆盖率</li><li>vue-loader：加载 Vue.js 单文件组件</li><li>i18n-loader: 国际化</li><li>cache-loader: 可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里</li></ul></blockquote><p>更多 Loader 请参考<a href="https://webpack.docschina.org/loaders/" target="_blank" rel="noopener">官网</a></p><h2 id="1-有哪些常见的Plugin？你用过哪些Plugin？"><a href="#1-有哪些常见的Plugin？你用过哪些Plugin？" class="headerlink" title="1.有哪些常见的Plugin？你用过哪些Plugin？"></a>1.有哪些常见的Plugin？你用过哪些Plugin？</h2><blockquote><ul><li>define-plugin：定义环境变量 (Webpack4 之后指定 mode 会自动配置)</li><li>ignore-plugin：忽略部分文件</li><li>html-webpack-plugin：简化 HTML 文件创建 (依赖于 html-loader)</li><li>web-webpack-plugin：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用</li><li>uglifyjs-webpack-plugin：不支持 ES6 压缩 (Webpack4 以前)</li><li>terser-webpack-plugin: 支持压缩 ES6 (Webpack4)</li><li>webpack-parallel-uglify-plugin: 多进程执行代码压缩，提升构建速度</li><li>mini-css-extract-plugin: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代extract-text-webpack-plugin)</li><li>serviceworker-webpack-plugin：为网页应用增加离线缓存功能</li><li>clean-webpack-plugin: 目录清理</li><li>ModuleConcatenationPlugin: 开启 Scope Hoisting</li><li>speed-measure-webpack-plugin: 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)</li><li>webpack-bundle-analyzer: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)</li></ul></blockquote><p>更多 Plugin 请参考<a href="https://webpack.docschina.org/plugins/" target="_blank" rel="noopener">官网</a></p><h2 id="2-那你再说一说Loader和Plugin的区别？"><a href="#2-那你再说一说Loader和Plugin的区别？" class="headerlink" title="2.那你再说一说Loader和Plugin的区别？"></a>2.那你再说一说Loader和Plugin的区别？</h2><p><code>Loader</code> 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。<br>因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。</p><p><code>Plugin</code> 就是插件，基于事件流框架 Tapable，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p><p><code>Loader</code> 在 module.rules中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。</p><p><code>Plugin</code> 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入。</p><h2 id="3-Webpack构建流程简单说一下"><a href="#3-Webpack构建流程简单说一下" class="headerlink" title="3.Webpack构建流程简单说一下"></a>3.Webpack构建流程简单说一下</h2><hr><p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p><ul><li><code>初始化参数</code>：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li><li><code>开始编译</code>：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</li><li><code>确定入口</code>：根据配置中的 entry 找出所有的入口文件</li><li><code>编译模块</code>：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li><code>完成模块编译</code>：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li><li><code>输出资源</code>：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li><li><code>输出完成</code>：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ul><p>在以上过程中，<code>Webpack</code> 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p><p>简单说</p><ul><li>初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler</li><li>编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li><li>输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中</li></ul><p>对源码感兴趣的同学可以移步我的另一篇专栏从源码窥探Webpack4.x原理</p><h2 id="4-webpack的打包过程大概流程"><a href="#4-webpack的打包过程大概流程" class="headerlink" title="4.webpack的打包过程大概流程"></a>4.webpack的打包过程大概流程</h2><blockquote><ul><li>合并<code>webpack.config.js</code>和命令行传递的参数，形成最终的配置</li><li>解析配置，得到<code>entry</code>入口</li><li>读取入口文件内容，通过<code>@babel/parse</code>将入口内容（code）转换成<code>ast</code></li><li>通过<code>@babel/traverse</code>遍历<code>ast</code>得到模块的各个依赖</li><li>通过<code>@babel/core</code>（实际的转换工作是由<code>@babel/preset-env</code>来完成的）将<code>ast</code>转换成<code>es5 code</code></li><li>通过循环伪递归的方式拿到所有模块的所有依赖并都转换成<code>es5</code></li></ul></blockquote><h2 id="5-source-map是什么？生产环境怎么用？"><a href="#5-source-map是什么？生产环境怎么用？" class="headerlink" title="5.source map是什么？生产环境怎么用？"></a>5.source map是什么？生产环境怎么用？</h2><p><code>source map</code> 是将编译、打包、压缩后的代码映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要调试源码就需要 soucre map。<br>map文件只要不打开开发者工具，浏览器是不会加载的。<br>线上环境一般有三种处理方案：</p><ul><li><code>hidden-source-map</code>：借助第三方错误监控平台 Sentry 使用</li><li><code>nosources-source-map</code>：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高</li><li><code>sourcemap</code>：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)</li></ul><p>注意：避免在生产中使用 inline- 和 eval-，因为它们会增加 bundle 体积大小，并降低整体性能。</p><h2 id="6-模块打包原理知道吗？"><a href="#6-模块打包原理知道吗？" class="headerlink" title="6.模块打包原理知道吗？"></a>6.模块打包原理知道吗？</h2><p>Webpack 实际上为每个模块创造了一个可以导出和导入的环境，本质上并没有修改<br>代码的执行逻辑，代码执行顺序与模块加载顺序也完全一致。</p><h2 id="7-文件监听原理呢？"><a href="#7-文件监听原理呢？" class="headerlink" title="7.文件监听原理呢？"></a>7.文件监听原理呢？</h2><p>在发现源码发生变化时，自动重新构建出新的输出文件。<br>Webpack开启监听模式，有两种方式：</p><p>启动 webpack 命令时，带上 –watch 参数在配置 webpack.config.js 中设置 watch:true<br>缺点：每次需要手动刷新浏览器<br>原理：轮询判断文件的最后编辑时间是否变化，如果某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等 aggregateTimeout 后再执行。</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token keyword">export</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 默认false,也就是不开启    </span>    watch<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 只有开启监听模式时，watchOptions才有意义   </span>    watchOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 默认为空，不监听的文件或者文件夹，支持正则匹配        </span>        ignored<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 监听到变化发生后会等300ms再去执行，默认300ms       </span>        aggregateTimeout<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次        </span>        poll<span class="token punctuation">:</span> <span class="token number">1000</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="8-说一下-Webpack-的热更新原理吧"><a href="#8-说一下-Webpack-的热更新原理吧" class="headerlink" title="8.说一下 Webpack 的热更新原理吧"></a>8.说一下 Webpack 的热更新原理吧</h2><p>Webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。<br>HMR的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上 WDS 与浏览器之间维护了一个 Websocket，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该chunk的增量更新。<br>后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader 和 vue-loader 都是借助这些 API 实现 HMR。<br>细节请参考Webpack HMR 原理解析</p><h2 id="9-如何对bundle体积进行监控和分析？"><a href="#9-如何对bundle体积进行监控和分析？" class="headerlink" title="9.如何对bundle体积进行监控和分析？"></a>9.如何对bundle体积进行监控和分析？</h2><p>VSCode 中有一个插件 Import Cost 可以帮助我们对引入模块的大小进行实时监测，还可以使用 webpack-bundle-analyzer 生成 bundle 的模块组成图，显示所占体积。<br>bundlesize 工具包可以进行自动化资源体积监控。</p><h2 id="10-文件指纹是什么？怎么用？"><a href="#10-文件指纹是什么？怎么用？" class="headerlink" title="10.文件指纹是什么？怎么用？"></a>10.文件指纹是什么？怎么用？</h2><p>文件指纹是打包后输出的文件名的后缀。</p><ul><li>Hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li><li>Chunkhash：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash</li><li>Contenthash：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变</li></ul><h3 id="JS的文件指纹设置"><a href="#JS的文件指纹设置" class="headerlink" title="JS的文件指纹设置"></a>JS的文件指纹设置</h3><p>设置 output 的 filename，用 chunkhash。</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>        entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>                app<span class="token punctuation">:</span> <span class="token string">'./scr/app.js'</span><span class="token punctuation">,</span>                search<span class="token punctuation">:</span> <span class="token string">'./src/search.js'</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>        output<span class="token punctuation">:</span> <span class="token punctuation">{</span>                filename<span class="token punctuation">:</span> <span class="token string">'[name][chunkhash:8].js'</span><span class="token punctuation">,</span>               path<span class="token punctuation">:</span>__dirname <span class="token operator">+</span> <span class="token string">'/dist'</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="CSS的文件指纹设置"><a href="#CSS的文件指纹设置" class="headerlink" title="CSS的文件指纹设置"></a>CSS的文件指纹设置</h3><p>设置 MiniCssExtractPlugin 的 filename，使用 contenthash。</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>        entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>                app<span class="token punctuation">:</span> <span class="token string">'./scr/app.js'</span><span class="token punctuation">,</span>                search<span class="token punctuation">:</span> <span class="token string">'./src/search.js'</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       output<span class="token punctuation">:</span> <span class="token punctuation">{</span>                filename<span class="token punctuation">:</span> <span class="token string">'[name][chunkhash:8].js'</span><span class="token punctuation">,</span>              path<span class="token punctuation">:</span>__dirname <span class="token operator">+</span> <span class="token string">'/dist'</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>       plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>               <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        filename<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`[name][contenthash:8].css`</span></span>             <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="图片的文件指纹设置"><a href="#图片的文件指纹设置" class="headerlink" title="图片的文件指纹设置"></a>图片的文件指纹设置</h3><p>设置file-loader的name，使用hash。<br>占位符名称及含义</p><ul><li>ext     资源后缀名</li><li>name    文件名称</li><li>path    文件的相对路径</li><li>folder  文件所在的文件夹</li><li>contenthash   文件的内容</li><li>hash，默认是md5生成hash         文件内容的hash，默认是md5生成</li><li>emoji        一个随机的指代文件内容的emoj<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>      rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>          test<span class="token punctuation">:</span> <span class="token regex">/\.(png|svg|jpg|gif)$/</span><span class="token punctuation">,</span>          use<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                  loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'img/[name][hash:8].[ext]'</span> <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="11-在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？"><a href="#11-在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？" class="headerlink" title="11.在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？"></a>11.在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？</h2>可以使用 enforce 强制执行 loader 的作用顺序，pre 代表在所有正常 loader 之前执行，post 是所有 loader 之后执行。(inline 官方不推荐使用)</li></ul><h2 id="12-是否写过Loader？简单描述一下编写loader的思路？"><a href="#12-是否写过Loader？简单描述一下编写loader的思路？" class="headerlink" title="12.是否写过Loader？简单描述一下编写loader的思路？"></a>12.是否写过Loader？简单描述一下编写loader的思路？</h2><p>Loader 支持链式调用，所以开发上需要严格遵循“单一职责”，每个 Loader 只负责自己需要负责的事情。</p><p>Loader的API 可以去<a href="https://www.webpackjs.com/loaders/" target="_blank" rel="noopener">官网查阅</a></p><ul><li><p>Loader 运行在 Node.js 中，我们可以调用任意 Node.js 自带的 API 或者安装第三方模块进行调用</p></li><li><p>Webpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串，当某些场景下 Loader 处理二进制文件时，需要通过 exports.raw = true 告诉 Webpack 该 Loader 是否需要二进制数据</p></li><li><p>尽可能的异步化 Loader，如果计算量很小，同步也可以</p></li><li><p>Loader 是无状态的，我们不应该在 Loader 中保留状态</p></li><li><p>使用 loader-utils 和 schema-utils 为我们提供的实用工具</p></li><li><p>加载本地 Loader 方法</p><p>  <code>Npm</code> 和<code>linkResolveLoader</code></p></li></ul><h2 id="13-是否写过Plugin？简单描述一下编写Plugin的思路？"><a href="#13-是否写过Plugin？简单描述一下编写Plugin的思路？" class="headerlink" title="13.是否写过Plugin？简单描述一下编写Plugin的思路？"></a>13.是否写过Plugin？简单描述一下编写Plugin的思路？</h2><p>webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在特定的阶段钩入想要添加的自定义功能。Webpack 的 Tapable 事件流机制保证了插件的有序性，使得整个系统扩展性良好。</p><p>Plugin的API 可以去<a href="https://www.webpackjs.com/api/plugins/" target="_blank" rel="noopener">官网查阅</a></p><ul><li><p>compiler 暴露了和 Webpack 整个生命周期相关的钩子</p></li><li><p>compilation 暴露了与模块和依赖有关的粒度更小的事件钩子</p></li><li><p>插件需要在其原型上绑定apply方法，才能访问 compiler 实例</p></li><li><p>传给每个插件的 compiler 和 compilation对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件</p></li><li><p>找出合适的事件点去完成想要的功能</p><ul><li>emit 事件发生时，可以读取到最终输出的资源、代码块、模块及其依赖，并进行修改(emit 事件是修改 Webpack 输出资源的最后时机)</li><li>watch-run 当依赖的文件发生变化时会触发</li></ul></li><li><p>异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住</p></li></ul><h2 id="14-使用webpack开发时，你用过哪些可以提高效率的插件？"><a href="#14-使用webpack开发时，你用过哪些可以提高效率的插件？" class="headerlink" title="14.使用webpack开发时，你用过哪些可以提高效率的插件？"></a>14.使用webpack开发时，你用过哪些可以提高效率的插件？</h2><ul><li><code>webpack-dashboard</code>：可以更友好的展示相关打包信息。</li><li><code>webpack-merge</code>：提取公共配置，减少重复配置代码</li><li><code>speed-measure-webpack-plugin</code>：简称 SMP，分析出 Webpack 打包过程中 Loader 和 Plugin 的耗时，有助于找到构建过程中的性能瓶颈。</li><li><code>size-plugin</code>：监控资源体积变化，尽早发现问题</li><li><code>HotModuleReplacementPlugin</code>：模块热替换</li></ul><h2 id="15-Babel原理吧"><a href="#15-Babel原理吧" class="headerlink" title="15.Babel原理吧"></a>15.Babel原理吧</h2><p>大多数JavaScript Parser遵循 estree 规范，Babel 最初基于 acorn 项目(轻量级现代 JavaScript 解析器) Babel大概分为三大部分：</p><ul><li><p>解析：将代码转换成 AST</p><ul><li>词法分析：将代码(字符串)分割为token流，即语法单元成的数组</li><li>语法分析：分析token流(上面生成的数组)并生成 AST</li></ul></li></ul><ul><li><p>转换：访问 AST 的节点进行变换操作生产新的 AST</p><ul><li><a href="https://github.com/NervJS/taro/blob/master/packages/taro-transformer-wx/src/index.ts#L15" target="_blank" rel="noopener">Taro</a>就是利用 babel 完成的小程序语法转换</li></ul></li><li><p>生成：以新的 AST 为基础生成代码</p></li></ul><p>想了解如何一步一步实现一个编译器的同学可以移步 Babel 官网曾经推荐的开源项目 <a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noopener">the-super-tiny-compiler</a></p><p>作者：童欧巴<br>链接：<a href="https://juejin.cn/post/6844904094281236487" target="_blank" rel="noopener">https://juejin.cn/post/6844904094281236487</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br>参考</p><p>深入浅出 Webpack<br>Webpack 实战<br>玩转 Webpack</p><p>作者：童欧巴<br>链接：<a href="https://juejin.im/post/6844904094281236487" target="_blank" rel="noopener">https://juejin.im/post/6844904094281236487</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 强制刷新组件</title>
      <link href="/2020/08/14/vue-1/"/>
      <url>/2020/08/14/vue-1/</url>
      
        <content type="html"><![CDATA[<p>使用vue进行开发时，如果要刷新当前路由，则调用router.go(0)方法即可。但是某些情况下，我们可能要求仅仅刷新某个组件，而不是路由，那么我们应该怎么做呢？</p><h3 id="1-使用this-forceUpdate强制重新渲染"><a href="#1-使用this-forceUpdate强制重新渲染" class="headerlink" title="1.使用this.$forceUpdate强制重新渲染"></a>1.使用this.$forceUpdate强制重新渲染</h3><p>如果要在组件内部中进行强制刷新，则可以调用<code>this.$forceUpdate()</code>强制重新渲染组件，从而达到更新目的</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"reload()"</span><span class="token operator">></span>刷新当前组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'comp'</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-使用v-if指令"><a href="#2-使用v-if指令" class="headerlink" title="2.使用v-if指令"></a>2.使用v-if指令</h3><p>如果是刷新某个子组件，则可以通过v-if指令实现。我们知道，当v-if的值发生变化时，组件都会被重新渲染一遍。因此，利用v-if指令的特性，可以达到强制刷新组件的目的。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>comp v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"update"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>comp<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"reload()"</span><span class="token operator">></span>刷新comp组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> comp <span class="token keyword">from</span> <span class="token string">'@/views/comp.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'parentComp'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            update<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 移除组件</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token comment" spellcheck="true">// 在组件移除后，重新渲染组件</span>            <span class="token comment" spellcheck="true">// this.$nextTick可实现在DOM 状态更新后，执行传入的方法。</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14. 最长公共前缀</title>
      <link href="/2020/08/05/leecode-3/"/>
      <url>/2020/08/05/leecode-3/</url>
      
        <content type="html"><![CDATA[<p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><p>输入: <code>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</code><br>输出: <code>&quot;fl&quot;</code></p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><p>输入: <code>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</code><br>输出: <code>&quot;&quot;</code><br>解释: 输入不存在公共前缀。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string[]} strs * @return {string} */</span><span class="token keyword">var</span> longestCommonPrefix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> prefix            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        prefix <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prefix<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个call、apply、bind</title>
      <link href="/2020/08/03/js-9/"/>
      <url>/2020/08/03/js-9/</url>
      
        <content type="html"><![CDATA[<h3 id="手写一个-new"><a href="#手写一个-new" class="headerlink" title="手写一个 new"></a>手写一个 <code>new</code></h3><blockquote><p>new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。new 关键字会进行如下的操作：</p></blockquote><blockquote><ul><li>1.创建一个空的简单JavaScript对象（即{ } ）；</li><li>2.链接该对象（即设置该对象的构造函数）到另一个对象 ；</li><li>3.将步骤1新创建的对象作为this的上下文 ；</li><li>4.如果该函数没有返回对象，则返回this。</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> car1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'Eagle'</span><span class="token punctuation">,</span> <span class="token string">'Talon TSi'</span><span class="token punctuation">,</span> <span class="token number">1993</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car1<span class="token punctuation">.</span>make<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 手写<code>new</code>的实现</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1、获得构造函数，</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 2、创建一个空的对象并链接到原型，obj 可以访问构造函数原型中的属性</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3、绑定 this 实现继承，obj 可以访问到构造函数中的属性</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4、优先返回构造函数返回的对象</span>    <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token punctuation">:</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Per</span><span class="token punctuation">(</span>make<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>Per<span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'小菜'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// const person = new Per('男', '小菜', 18);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>警告: 通过现代浏览器的操作属性的便利性，可以改变一个对象的 [[Prototype]] 属性, 这种行为在每一个JavaScript引擎和浏览器中都是一个非常慢且影响性能的操作，使用这种方式来改变和继承属性是对性能影响非常严重的，并且性能消耗的时间也不是简单的花费在 <code>obj.__proto__</code> = … 语句上, 它还会影响到所有继承来自该 [[Prototype]] 的对象，如果你关心性能，你就不应该在一个对象中修改它的 [[Prototype]]。相反, 创建一个新的且可以继承 [[Prototype]] 的对象，推荐使用 <code>Object.create()</code><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener">MDN:new运算符</a></p></blockquote><h3 id="手写一个call"><a href="#手写一个call" class="headerlink" title="手写一个call"></a>手写一个call</h3><blockquote><ul><li>1.context 存在就使用 context，否则是 window</li><li>2.使用 Object(context) 将 context 转换成对象，并通过 context.fn 将 this 指向 context</li><li>3.将函数设置为对象的属性</li><li>4.执行该函数</li><li>5.拿到结果返回前，删除掉 fn</li></ul></blockquote><pre class=" language-js"><code class="language-js">    Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>call1 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将方法挂载到对象上</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>        context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 执行对象的这个方法</span>        <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 将这个方法从对象上删除</span>        <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn        <span class="token keyword">return</span> result    <span class="token punctuation">}</span></code></pre><h3 id="手写一个apply"><a href="#手写一个apply" class="headerlink" title="手写一个apply"></a>手写一个apply</h3><blockquote><ul><li>将方法挂载到对象上</li><li>执行对象的这个方法</li><li>将这个方法从对象上删除</li></ul></blockquote><pre class=" language-js"><code class="language-js">    Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply1 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将方法挂载到对象上</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>        context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行对象的这个方法</span>        <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> result<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将这个方法从对象上删除</span>        <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn        <span class="token keyword">return</span> result    <span class="token punctuation">}</span></code></pre><h3 id="手写一个bind"><a href="#手写一个bind" class="headerlink" title="手写一个bind"></a>手写一个bind</h3><blockquote><ul><li>1.bind 的参数可以在绑定和调用的时候分两次传入</li><li>2.bindArgs 是绑定时除了第一个参数以外传入的参数，args 是调用时候传入的参数，将二者拼接后一起传入</li><li>3.如果使用 new 运算符构造绑定函数，则会改变 this 指向，this 指向当前的实例</li><li>4.通过 Fn 链接原型，这样 myBind 就可以通过原型链访问父类 Fn 的属性</li></ul></blockquote><pre class=" language-js"><code class="language-js">   Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myBind <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'this is not function'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断是否被当做构造函数使用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> that<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> that<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'小菜'</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>        a<span class="token punctuation">,</span>        b<span class="token punctuation">,</span>        c    <span class="token punctuation">}</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span><span class="token function">myBind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">myBind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// console.log(foo.bind(obj, 1, 2, 3)())</span></code></pre><h3 id="手写-instanceOf"><a href="#手写-instanceOf" class="headerlink" title="手写 instanceOf"></a>手写 instanceOf</h3><blockquote><ul><li>1.在 <code>left</code> 的原型链中层层查找，是否有原型等于 <code>prototype</code></li><li>2.确定边界条件，如果 <code>left === null</code>，即找到头没找到返回 <code>false</code>,<code>right === left</code>，即找到返回 <code>true</code></li><li>3.<code>left = left.__proto__</code>，不停的向上查找</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> myInstanceof <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        right <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>        left <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">===</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        left <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="手写-Object-create"><a href="#手写-Object-create" class="headerlink" title="手写 Object.create"></a>手写 Object.create</h3><blockquote><ul><li>新建一个空的构造函数 F ，然后让 F.prototype 指向 obj，最后返回 F 的实例</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> myCreate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端缓存机制</title>
      <link href="/2020/07/30/js-8/"/>
      <url>/2020/07/30/js-8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-缓存的作用"><a href="#1-缓存的作用" class="headerlink" title="1. 缓存的作用"></a>1. 缓存的作用</h3><blockquote><ul><li>加快资源加载速度，提高用户体验</li><li>节省带宽，服务器端资源无需重新传输；甚至一些缓存无需进行<code>Http</code>请求</li><li>服务器端缓存，如（CDN）可以减缓多用户并行请求的压力，减轻服务器压力</li></ul></blockquote><h3 id="2-缓存的分类"><a href="#2-缓存的分类" class="headerlink" title="2. 缓存的分类"></a>2. 缓存的分类</h3><ul><li>服务器缓存 如（CDN）</li><li>客户端缓存 （浏览器缓存）</li></ul><h3 id="3-浏览器缓存机制"><a href="#3-浏览器缓存机制" class="headerlink" title="3.浏览器缓存机制"></a>3.浏览器缓存机制</h3><ul><li><p>强缓存： 本地进行缓存过期时间的比较。若时间没有过期，则直接从本地获取缓存的资源，无需向服务器端发起请求。</p></li><li><p>协商缓存：发起<code>Http</code>请求，请求头中包含一些协商缓存的字段，与服务器端进行比较，若资源没有修改，则服务器端返回<code>304</code>状态码，客户端则可以直接从缓存中获取资源，反之香服务器端发起求获取最新资源。</p></li></ul><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><blockquote><ul><li>Expires: 浏览器第一次发起请求，服务器端返回资源时带有一个Expires字段，该字段由服务器端计算所得，表示缓存过期的时间期限<ol><li>具体判断是否过期：Expires &lt; 当前客户端时间</li><li>该缓存有个弊端：Expires的时间是由服务器端计算所得，计算依据为服务器端第一次请求时间，而当前判断缓存时，与客户端时间做比较，倘若两端的时间不同呢？所以还是不够可靠</li></ol></li></ul></blockquote><blockquote><ul><li>Cache-Control：第一次发起请求，资源会存储当前时间，并且保存一个max-age。</li></ul></blockquote><p>具体判断是否过期：<br>第一次请求的客户端时间 + max-age &lt; 当前客户端时间<br>max-age为第一次请求的时候服务器端发送的过期时间间隔，而两次比较都是客户端时间，因此可以解决Expires不准确的缺点。</p><p>注：Cache-Control的优先级比Expires高</p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><blockquote><ul><li>Last-Modified ， If-Modified-Since</li></ul></blockquote><ul><li><p>Last-Modified:浏览器端发送请求时，服务器端返回Last-Modified告诉浏览器资源最后修改的时间，浏览器则把该时间存储到资源中。</p></li><li><p>If-Modified-Since：当强缓存的资源过期时，若资源中有Last-Modified字段，则浏览器将Last-Modified的时间赋值给If-Modified-Since，浏览器发起请求，将If-modified-Since字段包含在请求Header中，服务器端获得该字段，将其与服务器端对应资源最后的修改时间进行对比，倘若服务器端时间较旧，则返回304，不包含消息体；反之则正常请求。</p></li></ul><p>确定：只能精确到秒级，在秒级内的操作无法精确； 若资源定期生成，但内容不变，此时Last-Modified会发生改变，则无法进行缓存了。</p><blockquote><ul><li>Etag，If-None-Match</li></ul></blockquote><p>该缓存方法的原理与Last-Modified相同；区别：Etag的值默认由服务器端中对文件的索引（INode）、大小（Size）和最后修改时间（MTime）进行Hash后生成。</p><p>注：Etag的优先级高于Last-Modified</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js下载导出Excel文件以及ie兼容问题</title>
      <link href="/2020/07/29/js-7/"/>
      <url>/2020/07/29/js-7/</url>
      
        <content type="html"><![CDATA[<h3 id="方法一-使用a标签下载"><a href="#方法一-使用a标签下载" class="headerlink" title="方法一 使用a标签下载"></a>方法一 使用a标签下载</h3><pre><code>-- 使用a标签下载, download 属性，`url` 是所要下载的地址，注意IE浏览器不支持`&lt;a href={`${url}`} download&gt;导出&lt;/a&gt;`</code></pre><h3 id="方法二-接口返会的是二进制流-兼容ie"><a href="#方法二-接口返会的是二进制流-兼容ie" class="headerlink" title="方法二  接口返会的是二进制流, 兼容ie"></a>方法二  接口返会的是二进制流, 兼容ie</h3><pre class=" language-js"><code class="language-js">        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'后端给的下载地址'</span>           <span class="token comment" spellcheck="true">//  获取时间戳</span>        <span class="token keyword">let</span> timestamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取XMLHttpRequest</span>        <span class="token keyword">let</span> xmlResquest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  发起请求</span>        xmlResquest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置请求头类型</span>        xmlResquest<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  设置请求token</span>        xmlResquest<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">"blob"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置响应类型为blob类型,这一行一定要放在open后面，不然ie会报错！</span>        <span class="token comment" spellcheck="true">//  返回</span>        xmlResquest<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>oEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> content <span class="token operator">=</span> xmlResquest<span class="token punctuation">.</span>response<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'msSaveOrOpenBlob'</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 兼容IE</span>                <span class="token keyword">let</span> filename <span class="token operator">=</span> timestamp<span class="token operator">+</span> <span class="token string">".xls"</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">'application/vnd.ms-excel'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span><span class="token function">msSaveOrOpenBlob</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 组装a标签</span>                <span class="token keyword">let</span> elink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置下载文件名</span>                elink<span class="token punctuation">.</span>download <span class="token operator">=</span> timestamp <span class="token operator">+</span> <span class="token string">".xls"</span><span class="token punctuation">;</span>                elink<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                elink<span class="token punctuation">.</span>href <span class="token operator">=</span> URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>elink<span class="token punctuation">)</span><span class="token punctuation">;</span>                elink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>elink<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        xmlResquest<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//lengthComputable 是 progress 的一个属性，表示资源是否可计算字节流</span>                <span class="token keyword">let</span> pross <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">/</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pross<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        xmlResquest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判定是否互为字符重排</title>
      <link href="/2020/07/27/leecode2/"/>
      <url>/2020/07/27/leecode2/</url>
      
        <content type="html"><![CDATA[<h3 id="给定两个字符串-s1-和-s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。"><a href="#给定两个字符串-s1-和-s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。" class="headerlink" title="给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。"></a>给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。</h3><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入: <code>s1 = &quot;abc&quot;, s2 = &quot;bca&quot;</code><br>输出: <code>true</code> </p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入: <code>s1 = &quot;abc&quot;, s2 = &quot;bad&quot;</code><br>输出: <code>false</code><br>说明：<br><code>0 &lt;= len(s1) &lt;= 100</code><br><code>0 &lt;= len(s2) &lt;= 100</code></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre><code>```js    /**     * @param {string} s1     * @param {string} s2     * @return {boolean}     */    var CheckPermutation = function(s1, s2) {        let arr1 = s1.split(&#39;&#39;).sort();        let arr2 = s2.split(&#39;&#39;).sort();        let flag = true        if(arr1.length == arr2.length){            for(let i=0;i&lt;arr1.length;i++){                if(arr1[i]==arr2[i]){                flag = true;                 } else{                flag = false;                  break;                  }            }        }else{        flag = false;          }    return flag;    };```</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判定字符是否唯一</title>
      <link href="/2020/07/24/leetcode1/"/>
      <url>/2020/07/24/leetcode1/</url>
      
        <content type="html"><![CDATA[<h3 id="实现一个算法，确定一个字符串-s-的所有字符是否全都不同"><a href="#实现一个算法，确定一个字符串-s-的所有字符是否全都不同" class="headerlink" title="实现一个算法，确定一个字符串 s 的所有字符是否全都不同"></a>实现一个算法，确定一个字符串 s 的所有字符是否全都不同</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token string">"leetcode"</span>输出<span class="token punctuation">:</span> <span class="token boolean">false</span> </code></pre><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token string">"abc"</span>输出<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre><h4 id="限制："><a href="#限制：" class="headerlink" title="限制："></a>限制：</h4><p>0 &lt;= len(s) &lt;= 100<br>如果你不使用额外的数据结构，会很加分。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} astr * @return {boolean} */</span><span class="token keyword">var</span> isUnique <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>astr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> astr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag<span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            flag<span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端js几种加密/解密方法</title>
      <link href="/2020/01/15/t-4/"/>
      <url>/2020/01/15/t-4/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Window-btoa-方法"><a href="#一-Window-btoa-方法" class="headerlink" title="一.Window btoa() 方法"></a>一.Window btoa() 方法</h2><p>btoa() 方法用于创建一个 base-64 编码的字符串。</p><p>该方法使用 <code>&quot;A-Z&quot;, &quot;a-z&quot;, &quot;0-9&quot;, &quot;+&quot;, &quot;/&quot; 和 &quot;=&quot;</code> 字符来编码字符串。</p><p>base-64 解码使用方法是 <code>atob()</code></p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">'echo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  ZWNobw==</span>window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">'ZWNobw=='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// echo</span></code></pre><blockquote><ul><li>注意 参数(str): 必需，要编码的字符串。</li></ul></blockquote><h2 id="二-MD5加密（不可逆）"><a href="#二-MD5加密（不可逆）" class="headerlink" title="二 MD5加密（不可逆）"></a>二 MD5加密（不可逆）</h2><p>MD5加密有好多种，对登录常用的事32位加密方式，用户信息，密码等私密信息进行加密</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> MD5 <span class="token keyword">from</span> <span class="token string">'crypto-js/md5'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> uid<span class="token punctuation">,</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> sign <span class="token operator">=</span> <span class="token function">MD5</span><span class="token punctuation">(</span>uid <span class="token operator">+</span> ts <span class="token operator">+</span> token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> Auth <span class="token operator">=</span> <span class="token punctuation">{</span> ts<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> sign <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Auth<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sign: 4211e87e94c3438a08a65d2c1cab4d01</span><span class="token comment" spellcheck="true">// ts: 1579074594954</span><span class="token comment" spellcheck="true">// uid: admin</span><span class="token punctuation">}</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">'echo'</span><span class="token keyword">let</span> MdUser <span class="token operator">=</span> <span class="token function">MD5</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// cbb11ed87dc8a95d81400c7f33c7c171</span></code></pre><h2 id="三-sha1加密（不可逆）"><a href="#三-sha1加密（不可逆）" class="headerlink" title="三 sha1加密（不可逆）"></a>三 sha1加密（不可逆）</h2><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/js-sha1/0.6.0/sha1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token keyword">let</span> sha1_1 <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sha1_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// b2d21e771d9f86865c5eff193663574dd1796c8f</span></code></pre><h2 id="四、编码和解码字符串"><a href="#四、编码和解码字符串" class="headerlink" title="四、编码和解码字符串"></a>四、编码和解码字符串</h2><p>使用JS函数的escape()和unescape()，分别是编码和解码字符串</p><pre class=" language-JS"><code class="language-JS">      var escape1 =escape("我的名字是：echo");//编码      console.log(escape1); // %u6211%u7684%u540D%u5B57%u662F%uFF1Aecho      var unescape1 = unescape(escape1); //解码      console.log(unescape1); // 我的名字是：echo</code></pre><h2 id="五、AES-DES加密解密"><a href="#五、AES-DES加密解密" class="headerlink" title="五、AES/DES加密解密"></a>五、AES/DES加密解密</h2><p>下载crypto-js.js 引入使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> aseKey <span class="token operator">=</span> <span class="token string">"12345678"</span>     <span class="token comment" spellcheck="true">//秘钥必须为：8/16/32位</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"80018000142"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加密</span><span class="token keyword">var</span> encrypt <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>AES<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>aseKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span>ECB<span class="token punctuation">,</span>  padding<span class="token punctuation">:</span> CryptoJS<span class="token punctuation">.</span>pad<span class="token punctuation">.</span>Pkcs7<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//VKrZlqykem73x8/T2oCfCQ==</span><span class="token comment" spellcheck="true">//解密</span><span class="token keyword">var</span> decrypt <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>AES<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">,</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>aseKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span>ECB<span class="token punctuation">,</span>  padding<span class="token punctuation">:</span> CryptoJS<span class="token punctuation">.</span>pad<span class="token punctuation">.</span>Pkcs7<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//80018000142</span></code></pre><blockquote><ul><li>加密的时候必须转成字符串 使用toString。 解密的时候 必须使用utf8的格式</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站优化</title>
      <link href="/2020/01/14/net/"/>
      <url>/2020/01/14/net/</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么-Javascript-要是单线程的"><a href="#1-为什么-Javascript-要是单线程的" class="headerlink" title="1. 为什么 Javascript 要是单线程的 ?"></a>1. 为什么 Javascript 要是单线程的 ?</h2><p>这是因为 Javascript 这门脚本语言诞生的使命所致!JavaScript 为处理页面中用户的交互,以及操作 DOM 树、CSS 样式树来给用户呈现一份动态而丰富的交互体验和服务器逻辑的交互处理。<br>如果 JavaScript 是多线程的方式来操作这些 UI DOM,则可能出现 UI 操作的冲突。<br>如果 Javascript 是多线程的话,在多线程的交互下,处于 UI 中的 DOM 节点就可能成为一个临界资源,<br>假设存在两个线程同时操作一个 DOM,一个负责修改一个负责删除,那么这个时候就需要浏览器来裁决如何生效哪个线程的执行结果。<br>当然我们可以通过锁来解决上面的问题。但为了避免因为引入了锁而带来更大的复杂性,Javascript 在最初就选择了单线程执行。</p><h2 id="2-为什么-JS-阻塞页面加载"><a href="#2-为什么-JS-阻塞页面加载" class="headerlink" title="2. 为什么 JS 阻塞页面加载 ?"></a>2. 为什么 JS 阻塞页面加载 ?</h2><p>由于 JavaScript 是可操纵 DOM 的,如果在修改这些元素属性同时渲染界面（即 JavaScript 线程和 UI 线程同时运行）,那么渲染线程前后获得的元素数据就可能不一致了。<br>因此为了防止渲染出现不可预期的结果,浏览器设置 <code>GUI 渲染线程与 JavaScript 引擎为互斥的关系</code>。<br>当 JavaScript 引擎执行时 GUI 线程会被挂起,GUI 更新会被保存在一个队列中等到引擎线程空闲时立即被执行。<br>从上面我们可以推理出,由于 GUI 渲染线程与 JavaScript 执行线程是互斥的关系,<br>当浏览器在执行 JavaScript 程序的时候,GUI 渲染线程会被保存在一个队列中,直到 JS 程序执行完成,才会接着执行。<br>因此如果 JS 执行的时间过长,这样就会造成页面的渲染不连贯,导致页面渲染加载阻塞的感觉。</p><h2 id="3-css-加载会造成阻塞吗-？"><a href="#3-css-加载会造成阻塞吗-？" class="headerlink" title="3. css 加载会造成阻塞吗 ？"></a>3. css 加载会造成阻塞吗 ？</h2><p>由上面浏览器渲染流程我们可以看出 :<br>DOM 和 CSSOM 通常是并行构建的,<code>所以 CSS 加载不会阻塞 DOM 的解析</code>。<br>然而,由于 Render Tree 是依赖于 DOM Tree 和 CSSOM Tree 的,<br>所以他必须等待到 CSSOM Tree 构建完成,也就是 CSS 资源加载完成(或者 CSS 资源加载失败)后,才能开始渲染。<br>因此,<code>CSS 加载会阻塞 Dom 的渲染</code>。<br>由于 JavaScript 是可操纵 DOM 和 css 样式 的,如果在修改这些元素属性同时渲染界面（即 JavaScript 线程和 UI 线程同时运行）,那么渲染线程前后获得的元素数据就可能不一致了。<br>因此为了防止渲染出现不可预期的结果,浏览器设置 <code>GUI 渲染线程与 JavaScript 引擎为互斥的关系</code>。<br>因此,样式表会在后面的 js 执行前先加载执行完毕,所以<code>css 会阻塞后面 js 的执行</code>。</p><h2 id="4-DOMContentLoaded-与-load-的区别"><a href="#4-DOMContentLoaded-与-load-的区别" class="headerlink" title="4,DOMContentLoaded 与 load 的区别 ?"></a>4,DOMContentLoaded 与 load 的区别 ?</h2><blockquote><ul><li>当 DOMContentLoaded 事件触发时,仅当 DOM 解析完成后,不包括样式表,图片。我们前面提到 CSS 加载会阻塞 Dom 的渲染和后面 js 的执行,js 会阻塞 Dom 解析,所以我们可以得到结论:当文档中没有脚本时,浏览器解析完文档便能触发 DOMContentLoaded 事件。如果文档中包含脚本,则脚本会阻塞文档的解析,而脚本需要等 CSSOM 构建完成才能执行。在任何情况下,DOMContentLoaded 的触发不需要等待图片等其他资源加载完成。</li></ul></blockquote><blockquote><ul><li>当 onload 事件触发时,页面上所有的 DOM,样式表,脚本,图片等资源已经加载完毕。</li></ul></blockquote><blockquote><ul><li>DOMContentLoaded -&gt; load。</li></ul></blockquote><p><a href="https://juejin.im/post/5e143104e51d45414a4715f7#heading-21" target="_blank" rel="noopener">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是类？(class)</title>
      <link href="/2020/01/14/t-3/"/>
      <url>/2020/01/14/t-3/</url>
      
        <content type="html"><![CDATA[<p>类(class)是在 JS 中编写构造函数的新方法。它是使用构造函数的语法糖，在底层中使用仍然是原型和基于原型的继承。</p><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">//ES5 Version</span>   <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   Person<span class="token punctuation">.</span>self <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">"[object Person]"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getFullName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>   <span class="token punctuation">}</span>  </code></pre><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">//ES6 Version</span>   <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token string">"[object Person]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>   重写方法并从另一个类继承。</p><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">//ES5 Version</span>Employee<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Employee</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">,</span> jobTitle<span class="token punctuation">,</span> yearStarted<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>jobTitle <span class="token operator">=</span> jobTitle<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>yearStarted <span class="token operator">=</span> yearStarted<span class="token punctuation">;</span><span class="token punctuation">}</span>Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>describe <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I have a position of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobTitle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I started at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>yearStarted<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"[object Employee]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ES6 Version</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//Inherits from "Person" class</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">,</span> jobTitle<span class="token punctuation">,</span> yearStarted<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>jobTitle <span class="token operator">=</span> jobTitle<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>yearStarted <span class="token operator">=</span> yearStarted<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I have a position of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobTitle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I started at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>yearStarted<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Overriding the "toString" method of "Person"</span>    <span class="token keyword">return</span> <span class="token string">"[object Employee]"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>所以我们要怎么知道它在内部使用原型？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Something</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">AnotherSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">as</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnotherSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Something<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "function"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> AnotherSomething<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "function"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "[object Object]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "[object Object]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">.</span>toString <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>toString <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-Router v4</title>
      <link href="/2020/01/10/react/"/>
      <url>/2020/01/10/react/</url>
      
        <content type="html"><![CDATA[<p>说到 React 我们一定离不开和 Router 打交道。不管 Vue Router 和 React Router ，他们的原理都是差不多的。这篇文章会从一个简单的例子一直拓展到真正的 React Router。</p><h2 id="React-router"><a href="#React-router" class="headerlink" title="React-router"></a>React-router</h2><p>React Router 是专为 React 设计的路由解决方案。它利用HTML5 的history API，来操作浏览器的 session history (会话历史)。</p><h2 id="React-路由"><a href="#React-路由" class="headerlink" title="React 路由"></a>React 路由</h2><p>React Router被拆分成四个包：</p><blockquote><ul><li><code>react-router</code> 实现了路由的核心功能。</li><li><code>react-router-dom</code> 基于react-router，加入了在浏览器运行环境下的一些功能。</li><li><code>react-router-native</code> 基于react-router，加入了 React Native 运行环境下的一些功能</li><li><code>react-router-redux</code> React Router 和 Redux 的集成</li><li><code>react-router-config</code></li></ul></blockquote><p>react-router提供核心的路由组件与函数。react-router-config用来配置静态路由（还在开发中。</p><p>进行网站（将会运行在浏览器环境中）构建，我们应当安装react-router-dom。因为react-router-dom已经暴露出react-router中暴露的对象与方法，因此你只需要安装并引用react-router-dom即可。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如上所说，我们使用react开发web应用，所以只需要安装react-router-dom。</p><pre class=" language-js"><code class="language-js">  npm install react<span class="token operator">-</span>router<span class="token operator">-</span>dom <span class="token operator">--</span>save</code></pre><h2 id="理解和使用react-router"><a href="#理解和使用react-router" class="headerlink" title="理解和使用react-router"></a>理解和使用react-router</h2><blockquote><ul><li><code>BrowserRouter</code>，这是对<code>Router</code>接口的实现。使得页面和浏览器的<code>history</code>保持一致。如：<code>window.location</code>。</li><li><code>HashRouter</code>，和上面的一样，只是使用的是url的hash部分，比如：<code>window.location.hash</code>。</li><li><code>MemoryRouter</code>，</li><li><code>NativeRouter</code>，处理react native内的路由。</li><li><code>StaticRouter</code>，处理静态路由，和v3一样。</li></ul></blockquote><h3 id="BrowserRouter-vs-HashRouter"><a href="#BrowserRouter-vs-HashRouter" class="headerlink" title="BrowserRouter vs HashRouter"></a>BrowserRouter vs HashRouter</h3><p>在react-router的各种router中，<code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code>是可以在浏览器中使用的。如果你使用的是一个非静态的站点、要处理各种不同的url那么你就需要使用<code>BrowserRouter</code>。相反的如果你的server只处理静态的url，那么就使用<code>HashRouter</code>。</p><h2 id="理解和使用Router"><a href="#理解和使用Router" class="headerlink" title="理解和使用Router"></a>理解和使用Router</h2><p>在4.0之前版本的 API 中，<code>&lt;Router&gt;</code> 组件的 children 只能是 React Router 提供的各种组件，如<code>&lt;Route&gt;</code>、<code>&lt;IndexRoute&gt;</code>、<code>&lt;Redirect&gt;</code>等。而在 React Router 4 中，你可以将各种组件及标签放进 <code>&lt;Router&gt;</code>组件中，他的角色也更像是 Redux 中的 <code>&lt;Provider&gt;</code>。不同的是<code>&lt;Provider&gt;</code>是用来保持与 store 的更新，而<code>&lt;Router&gt;</code>是用来保持与 location 的同步.</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 示例1</span><span class="token operator">&lt;</span>Router<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/topics"</span><span class="token operator">></span>主题列表<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/topics"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Topics<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span></code></pre><p>Router是所有路由组件共用的底层接口，一般我们的应用并不会使用这个接口，而是使用高级的路由：</p><blockquote><ul><li><code>&lt;BrowserRouter&gt;</code>：这是一个路由管理器,使用 HTML5 提供的 history API 来保持 UI 和 URL 的同步；</li><li><code>&lt;HashRouter&gt;</code>：使用 URL 的 hash (例如：window.location.hash) 来保持 UI 和 URL 的同步；</li><li><code>&lt;MemoryRouter&gt;</code>：能在内存保存你 “URL” 的历史纪录(并没有对地址栏读写)；</li><li><code>&lt;NativeRouter&gt;</code>：为使用React Native提供路由支持；</li><li><code>&lt;StaticRouter&gt;</code>：从不会改变地址；</li></ul></blockquote><h2 id="理解和使用Route"><a href="#理解和使用Route" class="headerlink" title="理解和使用Route"></a>理解和使用Route</h2><p><code>&lt;Route&gt;</code>组件是react router v4里最有用的组件。背后的使用哲学也很简单，无论何时你需要在匹配某个路径的时候绘制一个组件，那么就可以使用<code>Route</code>组件。</p><p><code>Route</code>组件可以使用如下的属性：</p><blockquote><ul><li><code>path</code>属性，字符串类型，它的值就是用来匹配url的。</li><li><code>component</code>属性，它的值是一个组件。在path匹配成功之后会绘制这个组件。</li><li><code>exact</code>属性，为true时，则要求路径与location.pathname必须完全匹配。</li><li><code>strict</code>属性，为true的时候，有结尾斜线的路径只能匹配有斜线的location.pathname。</li></ul></blockquote><p>还有其他的一些属性，可以用来代替<code>component</code>属性。</p><blockquote><ul><li><code>render</code>属性，一个返回React组件的方法。传说中的rencer-prop就是从这里来的。</li><li><code>children</code>属性，返回一个React组件的方法。只不过这个总是会绘制，即使没有匹配的路径的时候。</li></ul></blockquote><p>多数的时候是用<code>component</code>属性就可以满足。但是，某些情况下你不得不使用<code>render</code>或<code>children</code>属性。</p><blockquote><ul><li>match</li><li>location</li><li>history</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> FadingRoute <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> component<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Route <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>FadeIn<span class="token operator">></span>      <span class="token operator">&lt;</span>componnet <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>FadeIn<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">&lt;</span>Router<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/news"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>NewsFeed<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/user"</span> render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>UserPage<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>FadingRoute path<span class="token operator">=</span><span class="token string">"/others"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Something<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span class="token comment" spellcheck="true">// &lt;Route component>的优先级要比&lt;Route render>高，所以不要在同一个&lt;Route>中同时使用这两个属性</span></code></pre><h3 id="exact配置："><a href="#exact配置：" class="headerlink" title="exact配置："></a>exact配置：</h3><table><thead><tr><th>路径</th><th align="right">location.pathname</th><th align="center">exact</th><th align="center">是否匹配</th></tr></thead><tbody><tr><td>/my</td><td align="right">/my/one</td><td align="center">true</td><td align="center">否</td></tr><tr><td>/my</td><td align="right">/my/one</td><td align="center">false</td><td align="center">是</td></tr></tbody></table><h3 id="strict配置："><a href="#strict配置：" class="headerlink" title="strict配置："></a>strict配置：</h3><table><thead><tr><th>路径</th><th align="right">location.pathname</th><th align="center">strict</th><th align="center">是否匹配</th></tr></thead><tbody><tr><td>/my/</td><td align="right">/my</td><td align="center">true</td><td align="center">否</td></tr><tr><td>/my/</td><td align="right">/my/</td><td align="center">true</td><td align="center">是</td></tr><tr><td>/my/</td><td align="right">/my/one</td><td align="center">true</td><td align="center">是</td></tr></tbody></table><h2 id="理解并使用Link"><a href="#理解并使用Link" class="headerlink" title="理解并使用Link"></a>理解并使用Link</h2><p>使用<code>Link</code>可以在React应用的不同页面之间跳转。与unclor会重新加载整个页面不同，<code>Link</code>只会重新加载页面里和当前url可以匹配的部分。</p><blockquote><ul><li>to（string/object）：要跳转的路径或地址；</li><li>replace（bool）：为 true 时，点击链接后将使用新地址替换掉访问历史记录里面的原地址；为 false 时，点击链接后将在原有访问历史记录的基础上添加一个新的纪录。默认为 false；</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>  pathname<span class="token punctuation">:</span> <span class="token string">'/me'</span><span class="token punctuation">,</span>  search<span class="token punctuation">:</span> <span class="token string">'?sort=asc'</span><span class="token punctuation">,</span>  hash<span class="token punctuation">:</span> <span class="token string">'#hash'</span><span class="token punctuation">,</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span> fromHome<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>实例:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Nav <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">'/'</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>  <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>  <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/other"</span><span class="token operator">></span>Other<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>  <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/user"</span><span class="token operator">></span>User<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>  <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/my"</span><span class="token operator">></span>My<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 禁止跳转</span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">'##'</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 意想不到的效果</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="什么是NavLink"><a href="#什么是NavLink" class="headerlink" title="什么是NavLink"></a>什么是NavLink</h2><p><code>NavLink</code>是<code>Link</code>的一个子类，在Link组件的基础上增加了绘制组件的样式，比如：</p><blockquote><ul><li>activeClassName（string）：设置选中样式，默认值为 active；</li><li>activeStyle（object）：当元素被选中时, 为此元素添加样式；</li><li>exact（bool）：为 true 时, 只有当地址完全匹配 class 和 style 才会应用；</li><li>strict（bool）：为 true 时，在确定位置是否与当前 URL 匹配时，将考虑位置 pathname 后的斜线；</li><li>isActive（func）：判断链接是否激活的额外逻辑的功能；</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// activeClassName选中时样式为selected</span><span class="token operator">&lt;</span>NavLink  to<span class="token operator">=</span><span class="token string">"/faq"</span>  activeClassName<span class="token operator">=</span><span class="token string">"selected"</span><span class="token operator">></span>FAQs<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span class="token comment" spellcheck="true">// 选中时样式为activeStyle的样式设置</span><span class="token operator">&lt;</span>NavLink  to<span class="token operator">=</span><span class="token string">"/faq"</span>  activeStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    fontWeight<span class="token punctuation">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> <span class="token string">'red'</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>FAQs<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span class="token comment" spellcheck="true">// 当event id为奇数的时候，激活链接</span><span class="token keyword">const</span> oddEvent <span class="token operator">=</span> <span class="token punctuation">(</span>match<span class="token punctuation">,</span> location<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> eventID <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>eventID<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>eventID<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> eventID <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>NavLink  to<span class="token operator">=</span><span class="token string">"/events/123"</span>  isActive<span class="token operator">=</span><span class="token punctuation">{</span>oddEvent<span class="token punctuation">}</span><span class="token operator">></span>Event <span class="token number">123</span><span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span></code></pre><h2 id="Switch的用法"><a href="#Switch的用法" class="headerlink" title="Switch的用法"></a>Switch的用法</h2><p>组件和语法中的 <code>switch</code> 功能类似，执行第一个匹配的路由。这个逻辑很直观也就是排他性，主要解决使用多个 <code>&lt;Route&gt;</code> 时多个路由同时匹配的问题。<br><code>&lt;Switch&gt;</code>的独特之处是独它仅仅渲染一个路由。相反地，每一个包含匹配地址(location)的<code>&lt;Route&gt;</code>都会被渲染。<br>实例：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/:user"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Route component<span class="token operator">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>如果现在的URL是/about，那么<about>, <user>, 还有<nomatch>都会被渲染，因为它们都与路径(path)匹配。这种设计，允许我们以多种方式将多个<route>组合到我们的应用程序中，例如侧栏(sidebars)，面包屑(breadcrumbs)，bootstrap tabs等等。 然而，偶尔我们只想选择一个<route>来渲染。如果我们现在处于/about，我们也不希望匹配/:user（或者显示我们的 “404” 页面 ）。以下是使用 Switch 的方法来实现：</route></route></nomatch></user></about></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Switch<span class="token operator">></span>  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/:user"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Route component<span class="token operator">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span></code></pre><h2 id="使用Redirect组件实现重定向"><a href="#使用Redirect组件实现重定向" class="headerlink" title="使用Redirect组件实现重定向"></a>使用Redirect组件实现重定向</h2><p>无论何时你要重定向到另外一个地址的时候，都可以使用<code>Redirect</code>组件：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"register"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h2 id="浏览器历史"><a href="#浏览器历史" class="headerlink" title="浏览器历史"></a>浏览器历史</h2><p>react router v4中，提供了一个<code>history</code>对象。这个对象包含了多个api，可以用来操作浏览器历史等。</p><p>你也可以在React应用里使用history对象的方法：</p><pre class=" language-js"><code class="language-js">goMy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/my"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>goMy<span class="token punctuation">}</span><span class="token operator">></span>我的<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span></code></pre><p>用另外的方法可以写成：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/my"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"my"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h2 id="使用react-router-dom实现你的第一个demo"><a href="#使用react-router-dom实现你的第一个demo" class="headerlink" title="使用react router dom实现你的第一个demo"></a>使用react router dom实现你的第一个demo</h2><p>现在我们用react router dom来实现第一个demo。</p><p>首先，引入必要的组件。比如：<code>Route</code>和<code>BrowserRouter</code>。</p><p>写App组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>    <span class="token operator">&lt;</span>BaseLayout <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span><span class="token punctuation">)</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们来已创建的组件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> BaseLayout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"base"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>header<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>React Router v4 Browser Example<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>nav<span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/me"</span><span class="token operator">></span>Profile<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>Login<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/register"</span><span class="token operator">></span>Register<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/contact"</span><span class="token operator">></span>Contact<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>nav<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> exact component<span class="token operator">=</span><span class="token punctuation">{</span>HomePage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>AboutPage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/contact"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ContactPage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/login"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>LoginPage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/register"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>RegisterPage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/me"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ProfilePage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>footer<span class="token operator">></span>      React Router v4 Browser Example <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2017</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同时我们用react router v4里的Link和NavLink组件。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> BaseLayout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"base"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>header<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>React Router v4 Browser Example<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>nav<span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/me"</span><span class="token operator">></span>Profile<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>Login<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/register"</span><span class="token operator">></span>Register<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link <span class="token operator">=</span><span class="token string">"/contact"</span><span class="token operator">></span>Contact<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>nav<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> exact component<span class="token operator">=</span><span class="token punctuation">{</span>HomePage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>AboutPage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/contact"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ContactPage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/login"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>LoginPage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/register"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>RegisterPage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/me"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ProfilePage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>footer<span class="token operator">></span>      React Router v4 Browser Example <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2017</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参考地址:</p><p><a href="https://www.techiediaries.com/react-router-dom-v4/" target="_blank" rel="noopener">react router 4</a>;<br><a href="https://juejin.im/post/5d6352116fb9a06ae8361932#heading-33" target="_blank" rel="noopener">Run丘比特-掘金</a>;</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组reduce()</title>
      <link href="/2020/01/07/t-2/"/>
      <url>/2020/01/07/t-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1、语法"><a href="#1、语法" class="headerlink" title="1、语法"></a>1、语法</h2><p><code>reduce()</code> 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><p><code>reduce()</code> 可以作为一个高阶函数，用于函数的 compose。</p><blockquote><ul><li>注意: reduce() 对于空数组是不会执行回调函数的。</li></ul></blockquote><pre class=" language-js"><code class="language-js">array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>callback （执行数组中每个值的函数，包含四个参数）    <span class="token number">1</span>、total （上一次调用回调返回的值，或者是提供的初始值（initialValue））必需    <span class="token number">2</span>、currentValue （数组中当前被处理的元素）必需    <span class="token number">3</span>、currentIndex （当前元素在数组中的索引）可选    <span class="token number">4</span>、arr （调用 reduce 的数组）可选initialValue （作为第一次调用 callback 的第一个参数。）</code></pre><h2 id="2-实例解析-initialValue-参数"><a href="#2-实例解析-initialValue-参数" class="headerlink" title="2 实例解析 initialValue 参数"></a>2 实例解析 initialValue 参数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果：</span><span class="token comment" spellcheck="true">// 1 2 1</span><span class="token comment" spellcheck="true">// 3 3 2</span><span class="token comment" spellcheck="true">// 6 4 3</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4] 10</span></code></pre><p>这里可以看出，上面的例子index是从1开始的，第一次的prev的值是数组的第一个值。数组长度是4，但是reduce函数循环3次。</p><blockquote><ul><li>再看第二个例子：</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span>  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span>，<span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//注意这里设置了初始值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果：</span><span class="token comment" spellcheck="true">// 0 1 0</span><span class="token comment" spellcheck="true">// 1 2 1</span><span class="token comment" spellcheck="true">// 3 3 2</span><span class="token comment" spellcheck="true">// 6 4 3</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4] 10</span></code></pre><p>这个例子index是从0开始的，第一次的prev的值是我们设置的初始值0，数组长度是4，reduce函数循环4次。</p><blockquote><ul><li>结论：如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。</li></ul></blockquote><p>注意：如果这个数组为空，运用reduce是什么情况？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span>  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//报错，"TypeError: Reduce of empty array with no initial value"</span></code></pre><p>但是要是我们设置了初始值就不会报错，如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span>  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span>，<span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [] 0</span></code></pre><h2 id="3、reduce的简单用法"><a href="#3、reduce的简单用法" class="headerlink" title="3、reduce的简单用法"></a>3、reduce的简单用法</h2><p>当然最简单的就是我们常用的数组求和，求乘积了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">redece</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x<span class="token operator">+</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> mul <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">redece</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x<span class="token operator">*</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//求和，10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> mul <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//求乘积，24</span></code></pre><h2 id="4、reduce的高级用法"><a href="#4、reduce的高级用法" class="headerlink" title="4、reduce的高级用法"></a>4、reduce的高级用法</h2><h3 id="（1）计算数组中每个元素出现的次数"><a href="#（1）计算数组中每个元素出现的次数" class="headerlink" title="（1）计算数组中每个元素出现的次数"></a>（1）计算数组中每个元素出现的次数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> colorNum <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token keyword">in</span> pre<span class="token punctuation">)</span><span class="token punctuation">{</span>        pre<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">++</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        pre<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pre<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorNum<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {red: 3, blue: 1, green: 2}</span></code></pre><h3 id="（2）数组去重"><a href="#（2）数组去重" class="headerlink" title="（2）数组去重"></a>（2）数组去重</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pre<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> pre    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4]</span></code></pre><h3 id="（3）将二维数组转化为一维"><a href="#（3）将二维数组转化为一维" class="headerlink" title="（3）将二维数组转化为一维"></a>（3）将二维数组转化为一维</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, 1, 2, 3, 4, 5]</span></code></pre><h3 id="（3）将多维数组转化为一维"><a href="#（3）将多维数组转化为一维" class="headerlink" title="（3）将多维数组转化为一维"></a>（3）将多维数组转化为一维</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">newArr</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[0, 1, 2, 3, 4, 5, 6, 7]</span></code></pre><h3 id="（4）、对象里的属性求和"><a href="#（4）、对象里的属性求和" class="headerlink" title="（4）、对象里的属性求和"></a>（4）、对象里的属性求和</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        subject<span class="token punctuation">:</span> <span class="token string">'math'</span><span class="token punctuation">,</span>        score<span class="token punctuation">:</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        subject<span class="token punctuation">:</span> <span class="token string">'chinese'</span><span class="token punctuation">,</span>        score<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        subject<span class="token punctuation">:</span> <span class="token string">'english'</span><span class="token punctuation">,</span>        score<span class="token punctuation">:</span> <span class="token number">30</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> cur<span class="token punctuation">.</span>score <span class="token operator">+</span> pre<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//60</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红绿灯不断交替重复亮灯</title>
      <link href="/2020/01/07/t-1/"/>
      <url>/2020/01/07/t-1/</url>
      
        <content type="html"><![CDATA[<p>红灯三秒亮一次，绿灯一秒亮一次，黄灯2秒亮一次；如何让三个灯不断交替重复亮灯 ？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> light <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>timmer<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> timmer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css清除浮动方法（9种方法）</title>
      <link href="/2020/01/06/css/"/>
      <url>/2020/01/06/css/</url>
      
        <content type="html"><![CDATA[<p>浮动的定义：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来。</p><h4 id="为什么要清除浮动？"><a href="#为什么要清除浮动？" class="headerlink" title="为什么要清除浮动？"></a>为什么要清除浮动？</h4><p>清除浮动主要是为了解决，父元素因为子级元素浮动引起的内部高度为0的问题当父元素不给高度的时候，内部元素不浮动时会撑开，而浮动的时候，父元素变成一条线</p><p>clear：both：在左右两侧均不允许浮动元素。本质就是闭合浮动， 就是让父盒子闭合出口和入口，不让子盒子出来</p><p>clear:left | right | both | none | inherit：元素的某个方向上不能有浮动元素<br>如果我们清除了浮动，父元素自动检测子盒子最高的高度，然后与其同高。</p><p>高度塌陷：如果父元素只包含浮动元素，且父元素未设置高度和宽度的时候。那么它的高度就会塌缩为零</p><h4 id="页面结构"><a href="#页面结构" class="headerlink" title="页面结构"></a>页面结构</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>Left<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>Right<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"clearfloat"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div2"</span><span class="token operator">></span>    div2<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><h3 id="1-父级div定义伪类：after和zoom"><a href="#1-父级div定义伪类：after和zoom" class="headerlink" title="1.父级div定义伪类：after和zoom"></a>1.父级div定义伪类：after和zoom</h3><p>万能清除法 after伪类 清浮动</p><blockquote><ul><li>原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题</li></ul></blockquote><blockquote><ul><li>缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout.</li></ul></blockquote><pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#000080</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.div2</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#800080</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">20%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">30%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*清除浮动代码*/</span><span class="token selector"><span class="token class">.clearfloat</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.clearfloat</span></span><span class="token punctuation">{</span><span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><h3 id="2-使用before和after双伪元素清除浮动"><a href="#2-使用before和after双伪元素清除浮动" class="headerlink" title="2.使用before和after双伪元素清除浮动"></a>2.使用before和after双伪元素清除浮动</h3><pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#000080</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.div2</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#800080</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">20%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">30%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*清除浮动代码*/</span>    <span class="token selector"><span class="token class">.clearfloat</span><span class="token pseudo-element">:after</span>, <span class="token class">.clearfloat</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.clearfloat</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.clearfloat</span> </span><span class="token punctuation">{</span>*<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-在结尾处添加空div标签clear-both"><a href="#3-在结尾处添加空div标签clear-both" class="headerlink" title="3.在结尾处添加空div标签clear:both"></a>3.在结尾处添加空div标签clear:both</h3><blockquote><ul><li>原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度</li><li>缺点：如果页面浮动布局多，就要增加很多空div，让人感觉很不爽, 缺点：添加无意义标签，语义化差</li></ul></blockquote><pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#000080</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.div2</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#800080</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">20%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">30%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*清除浮动代码*/</span>    <span class="token selector"><span class="token class">.clearfloat</span></span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">}</span></code></pre><h3 id="4-父级div定义height"><a href="#4-父级div定义height" class="headerlink" title="4.父级div定义height"></a>4.父级div定义height</h3><blockquote><ul><li>原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题</li><li>缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题 建议：不推荐使用，只建议高度固定的布局时使用</li></ul></blockquote><pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#000080</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*解决代码*/</span>        <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.div2</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#800080</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">20%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">30%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span></code></pre><h3 id="5-父级div定义overflow-hidden"><a href="#5-父级div定义overflow-hidden" class="headerlink" title="5.父级div定义overflow:hidden"></a>5.父级div定义overflow:hidden</h3><p>通过触发BFC方式，实现清除浮动内容增多的时候容易造成不会自动换行导致内容被隐藏掉，无法显示要溢出的元素</p><blockquote><ul><li>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度  </li><li>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏 </li><li>建议：只推荐没有使用position或对overflow:hidden理解比较深的朋友使用</li></ul></blockquote><pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#000080</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*解决代码*/</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">98%</span><span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span>hidden    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.div2</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#800080</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">98%</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">20%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">30%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span></code></pre><h3 id="6-父级div定义overflow-auto"><a href="#6-父级div定义overflow-auto" class="headerlink" title="6.父级div定义overflow:auto"></a>6.父级div定义overflow:auto</h3><blockquote><ul><li>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:auto时，浏览器会自动检查浮动区域的高度     </li><li>缺点：内部宽高超过父级div时，会出现滚动条。 </li><li>建议：不推荐使用，如果你需要出现滚动条或者确保你的代码不会出现滚动条就使用吧。</li></ul></blockquote><h3 id="7-父级div也一起浮动"><a href="#7-父级div也一起浮动" class="headerlink" title="7.父级div也一起浮动"></a>7.父级div也一起浮动</h3><blockquote><p>-原理：所有代码一起浮动，就变成了一个整体 优点：没有优点<br>-缺点：会产生新的浮动问题。 建议：不推荐使用，只作了解。</p></blockquote><h3 id="8-父级div定义display-table"><a href="#8-父级div定义display-table" class="headerlink" title="8.父级div定义display:table"></a>8.父级div定义display:table</h3><blockquote><ul><li>原理：将div属性变成表格 </li><li>优点：没有优点 </li><li>缺点：会产生新的未知问题 建议：不推荐使用，只作了解</li></ul></blockquote><h3 id="9结尾处加br标签clear-both"><a href="#9结尾处加br标签clear-both" class="headerlink" title="9结尾处加br标签clear:both"></a>9结尾处加br标签clear:both</h3><pre class=" language-css"><code class="language-css">   <span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#000080</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>   <span class="token selector"><span class="token class">.div2</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#800080</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">}</span>   <span class="token selector"><span class="token class">.left</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">20%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span>   <span class="token selector"><span class="token class">.right</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">30%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#DDD</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/*解决代码*/</span>   <span class="token selector"><span class="token class">.clearfloat</span></span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2019/12/31/webpack-0/"/>
      <url>/2019/12/31/webpack-0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是webpack"><a href="#一、什么是webpack" class="headerlink" title="一、什么是webpack"></a>一、什么是webpack</h3><p>webpack是一个打包工具，他的宗旨是一切静态资源皆可打包。有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了。现在是MVVM的时代，数据驱动界面。webpack它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p><h3 id="二、webpack核心概念"><a href="#二、webpack核心概念" class="headerlink" title="二、webpack核心概念"></a>二、webpack核心概念</h3><blockquote><ul><li>1、Entry（入口）：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</li></ul></blockquote><blockquote><ul><li>2、Output（出口）：告诉 webpack 在哪里输出它所创建的结果文件，以及如何命名这些文件，默认值为./dist。</li></ul></blockquote><blockquote><ul><li>3、Loader（模块转换器）：将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</li></ul></blockquote><blockquote><ul><li>4、Plugins（插件）：在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li></ul></blockquote><blockquote><ul><li>5、Module(模块)：开发者将程序分解成离散功能块，并称之为模块，在webpack里一个模块对应着一个文件，webpack会从配置的 Entry 开始递归找出所有依赖的模块。</li></ul></blockquote><h3 id="三、webpack执行流程"><a href="#三、webpack执行流程" class="headerlink" title="三、webpack执行流程"></a>三、webpack执行流程</h3><p>webpack启动后会在entry里配置的module开始递归解析entry所依赖的所有module，每找到一个module, 就会根据配置的loader去找相应的转换规则，对module进行转换后在解析当前module所依赖的module，这些模块会以entry为分组，一个entry和所有相依赖的module也就是一个chunk，最后webpack会把所有chunk转换成文件输出，在整个流程中webpack会在恰当的时机执行plugin的逻辑</p><h3 id="四、webpack简单打包案例"><a href="#四、webpack简单打包案例" class="headerlink" title="四、webpack简单打包案例"></a>四、webpack简单打包案例</h3><h4 id="【4-1】准备工作"><a href="#【4-1】准备工作" class="headerlink" title="【4.1】准备工作"></a>【4.1】准备工作</h4><p>新建一个空文件夹用于创建项目， 如下我在D盘创建了一个名为webpack_demo的文件夹，使用终端进入文件夹， 使用npm init 命令初始化一个package.json文件，输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过如果你不打算发布这个模块，直接一路回车就好。（也可以使用npm init -y这个命令来一次生成package.json文件，这样终端不会询问你问题）。</p><h4 id="【4-2】安装webpack"><a href="#【4-2】安装webpack" class="headerlink" title="【4.2】安装webpack"></a>【4.2】安装webpack</h4><p>接下来在命令行中输入以下命令安装webpack，如果你想一步到位的话，就把全局webpack和本地项目webpack全都先装了，因为后面一些模块会用到。</p><pre class=" language-js"><code class="language-js">npm install webpack <span class="token operator">--</span>global                <span class="token comment" spellcheck="true">// 安装全局webpack命令</span>npm install webpack webpack<span class="token operator">-</span>cli <span class="token operator">--</span>save<span class="token operator">-</span>dev  <span class="token comment" spellcheck="true">// 安装本地项目模块</span><span class="token comment" spellcheck="true">// install    可简写为i,</span><span class="token comment" spellcheck="true">// --global   可简写为-g</span><span class="token comment" spellcheck="true">// --save     可简写为-S</span><span class="token comment" spellcheck="true">// --save-dev 可简写为-D</span></code></pre><h4 id="【4-3】新建文件"><a href="#【4-3】新建文件" class="headerlink" title="【4.3】新建文件"></a>【4.3】新建文件</h4><p>在webpack_demo文件夹下新建两个文件夹，分别为src文件夹和dist文件夹，接着在src文件夹下新增index.js文件和hello.js文件，在dist文件夹下新增index.html文件。此时项目结构如下：<br><a href="https://user-gold-cdn.xitu.io/2019/12/24/16f374c2eb7d555a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">项目结构图</a><br>在hello.js中导出一个模块</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// hello.js </span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> hello <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hello<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"hello xxx!"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hello<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在index.js中引入这个hello.js模块</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./hello.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在index.html下引入打包后的js文件bundle.js</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Webpack demo<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'root'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"bundle.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这是打包之后的js文件，我们暂时命名为bundle<span class="token punctuation">.</span>js<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h4 id="【4-4】进行打包"><a href="#【4-4】进行打包" class="headerlink" title="【4.4】进行打包"></a>【4.4】进行打包</h4><p>在终端输入如下命令进行打包</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack全局安装的情况下，output后面的是打包后的文件路径，bundle.js为打包后的js文件名</span>webpack src<span class="token operator">/</span>index<span class="token punctuation">.</span>js <span class="token operator">--</span>output dist<span class="token operator">/</span>bundle<span class="token punctuation">.</span>js  <span class="token comment" spellcheck="true">// --output可简写为-o</span><span class="token comment" spellcheck="true">// 上述命令相当于把src文件夹下的index.js文件打包到dist文件夹下的bundle.js，这样就生成了打包后的文件供index.html引入</span></code></pre><p>结果如下<br><a href="https://user-gold-cdn.xitu.io/2019/12/24/16f374c2eca103e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">打包结果图</a><br>我们已经成功使用webpack进行打包，这时小伙伴要说了，每次都在终端中输入这么长的命令，感觉好烦啊，接下来学习通过配置文件来使用webpack。</p><h4 id="【4-5】通过配置文件来使用webpack"><a href="#【4-5】通过配置文件来使用webpack" class="headerlink" title="【4.5】通过配置文件来使用webpack"></a>【4.5】通过配置文件来使用webpack</h4><p>在当前项目的根目录下新建一个配置文件webpack.config.js，我们写下如下简单配置代码，目前只涉及入口配置（相当于我们的index.js，从它开始打包）和出口配置（相当于我们打包生成的bundle.js）。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口文件</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> __dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>        filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// path.join的功能是拼接路径片段</span><span class="token comment" spellcheck="true">// __dirname是node.js中的一个全局变量，它指向当前执行脚本所在的目录，即D:\webpack_demo</span></code></pre><p>有了这个配置文件，我们只需在终端中运行webpack命令就可进行打包，这条命令会自动引用webpack.config.js文件中的配置选项</p><h4 id="【4-6】package-json文件中自定义脚本命令"><a href="#【4-6】package-json文件中自定义脚本命令" class="headerlink" title="【4.6】package.json文件中自定义脚本命令"></a>【4.6】package.json文件中自定义脚本命令</h4><p>Node项目一般都有一个package.json文件，该文件用于描述当前项目，其中有一个scripts属性，该属性可以自定义脚本命令，例如我们运行的打包命令，那么可以在scripts里添加自定义脚本为<br><a href="https://user-gold-cdn.xitu.io/2019/12/24/16f374c2f40cd7cf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">package.json图</a><br>之后就可以使用npm run build来运行该脚本命令，这样有什么好处呢？如果命令行很短，好处当然不明显了，但是如何命令行很长呢？那么我们可以在这里添加每次都需要执行的命令，配置了scripts后， npm run key值相当于在终端运行了value值</p><h3 id="五、构建本地服务"><a href="#五、构建本地服务" class="headerlink" title="五、构建本地服务"></a>五、构建本地服务</h3><p>上面案例我们是通过打开本地HTML文件来查看页面的，vue，react框架时都是运行在本地服务器上的，那我们能不能也改成那样呢？接下来学习如何构建本地服务</p><h4 id="【5-1】webpack-dev-server配置本地服务器"><a href="#【5-1】webpack-dev-server配置本地服务器" class="headerlink" title="【5.1】webpack-dev-server配置本地服务器"></a>【5.1】webpack-dev-server配置本地服务器</h4><p>Webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js构建，它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖：</p><pre class=" language-js"><code class="language-js">npm install webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span>D</code></pre><h4 id="【5-2】devServer配置项"><a href="#【5-2】devServer配置项" class="headerlink" title="【5.2】devServer配置项"></a>【5.2】devServer配置项</h4><blockquote><ul><li>contentBase：该配置项指定了服务器资源的根目录，如果不配置contentBase的话，那么contentBase默认是当前执行的目录,一般是项目的根目录</li><li>port：指定了开启服务器的端口号，默认为8080</li><li>host：配置 DevServer的服务器监听地址，默认为 127.0.0.1</li><li>headers：该配置项可以在HTTP响应中注入一些HTTP响应头。例如：</li></ul></blockquote><pre class=" language-json"><code class="language-json">    headers<span class="token operator">:</span> <span class="token punctuation">{</span>      'X-foo'<span class="token operator">:</span> '<span class="token number">112233</span>'    <span class="token punctuation">}</span></code></pre><blockquote><ul><li>historyApiFallback：该配置项属性是用来应对返回404页面时定向跳转到特定页面的。一般是应用在单页应用，比如在访问路由时候，访问不到该路由的时候，通过该配置项，设置属性值为true的时候，会自动跳转到 index.html下。当然我们也可以手动通过 正则来匹配路由</li></ul></blockquote><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 跳到index.html页面 </span>    historyApiFallback<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 使用正则来匹配路由</span>    historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>      rewrites<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\/user/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">'/user.html'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\/home/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">'/home.html'</span> <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span></code></pre><blockquote><ul><li>hot：该配置项是指模块替换换功能，DevServer 默认行为是在发现源代码被更新后通过自动刷新整个页面来做到实时预览的，但是开启模块热替换功能后，它是通过在不刷新整个页面的情况下通过使用新模块替换旧模块来做到实时预览的。</li><li>proxy : 有时候我们使用webpack在本地启动服务器的时候，由于我们使用的访问的域名是 <a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a> 这样的，但是我们服务端的接口是其他的，可以通过该配置来解决跨域的问题</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 假设服务端接口域名为：http://news.baidu.com</span>proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    target<span class="token punctuation">:</span> <span class="token string">'http://news.baidu.com'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 目标接口的域名</span>    <span class="token comment" spellcheck="true">// secure: true,  // https 的时候 使用该参数</span>    changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 是否跨域</span>    pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'^/api'</span> <span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true">// 重写路径</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><ul><li>inline：设置为true，当源文件改变时会自动刷新页面</li><li>open：该属性用于DevServer启动且第一次构建完成时，自动使用我们的系统默认浏览器去打开网页。</li><li>compress：配置是否启用 gzip 压缩，boolean 类型，默认为 false</li><li>overlay：该属性是用来在编译出错的时候，在浏览器页面上显示错误。该属性值默认为false，需要的话，设置该参数为true</li></ul></blockquote><h4 id="【5-3】添加配置项到webpack-config-js"><a href="#【5-3】添加配置项到webpack-config-js" class="headerlink" title="【5.3】添加配置项到webpack.config.js"></a>【5.3】添加配置项到webpack.config.js</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>         changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">''</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="【5-4】在package-json文件中添加启动命令"><a href="#【5-4】在package-json文件中添加启动命令" class="headerlink" title="【5.4】在package.json文件中添加启动命令"></a>【5.4】在package.json文件中添加启动命令</h4><pre class=" language-js"><code class="language-js">  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --open"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>  我们用dev来启动本地服务器， webpack-dev-server就是启动服务器的命令，- -opn是用于启动完服务器后自动打开浏览器，这时候我们自定义命令方式的便捷性就体现出来了，可以多个命令集成在一起运行，即我们定义了一个dev命令名称就可以同时运行了webpack-dev-server和- -opn两个命令现在在终端输入npm run dev 运行服务器</p><p><a href="https://user-gold-cdn.xitu.io/2019/12/24/16f374c31218a006?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">运行图</a><br>这样我们就可以在<a href="http://localhost:8088/中查看页面" target="_blank" rel="noopener">http://localhost:8088/中查看页面</a> (退出服务器，可使用ctrl+c后，再按y确认即可退出服务器运行)</p><h4 id="【5-5】Source-Maps调试配置"><a href="#【5-5】Source-Maps调试配置" class="headerlink" title="【5.5】Source Maps调试配置"></a>【5.5】Source Maps调试配置</h4><p>作为开发，代码调试当然少不了，那么问题来了，经过打包后的文件，你是不容易找到出错的地方的，<code>Source Map</code>就是用来解决这个问题的。通过如下配置，我们会在打包时生成对应于打包文件的<code>.map</code>文件，使得编译后的代码可读性更高，更易于调试。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span> <span class="token comment" spellcheck="true">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><span class="token punctuation">}</span></code></pre><p>配置好后，我们再次运行npm run build进行打包，这时我们会发现在dist文件夹中多出了一个bundle.js.map。如果我们的代码有bug，在浏览器的调试工具中会提示错误出现的位置，这就是devtool：’source-map’ 配置项的作用。</p><h3 id="六、Loaders"><a href="#六、Loaders" class="headerlink" title="六、Loaders"></a>六、Loaders</h3><p>loaders是webpack最强大的功能之一，通过不同的loader，webpack有能力调用外部的脚本或工具，实现对不同格式的文件的处理，例如把scss转为css，将ES66、ES7等语法转化为当前浏览器能识别的语法，将JSX转化为js等多项功能。Loaders需要单独安装并且需要在webpack.comfig.js中的modules配置项下进行配置，Loaders的配置包括以下几方面：</p><blockquote><ul><li>test：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）</li><li>loader：loader的名称（必须）</li><li>include/exclude： 手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）</li><li>options： 为loaders提供额外的设置选项（可选）</li></ul></blockquote><h4 id="【6-1】配置css-loader"><a href="#【6-1】配置css-loader" class="headerlink" title="【6.1】配置css-loader"></a>【6.1】配置css-loader</h4><p>如果我们要加载一个css文件，需要安装style-loader和css-loader</p><pre class=" language-js"><code class="language-js">npm install style<span class="token operator">-</span>loader css<span class="token operator">-</span>loader <span class="token operator">-</span>D</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.css结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们在src文件夹下新建index.css文件，设置body的样式</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* index.css */</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在src文件夹下的index.js引入它</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span> <span class="token comment" spellcheck="true">// 导入css</span><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./hello.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行npm run dev启动服务器，会发现页面背景颜色变成了灰色</p><h4 id="【6-2】配置sass"><a href="#【6-2】配置sass" class="headerlink" title="【6.2】配置sass"></a>【6.2】配置sass</h4><pre class=" language-js"><code class="language-js">npm install sass<span class="token operator">-</span>loader node<span class="token operator">-</span>sass <span class="token operator">-</span>D <span class="token comment" spellcheck="true">// 因为sass-loader依赖于node-sass，所以还要安装node-sass</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.css结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(scss|sass)$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.scss和.sass结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="七、Plugins（插件）"><a href="#七、Plugins（插件）" class="headerlink" title="七、Plugins（插件）"></a>七、Plugins（插件）</h3><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p><h4 id="【7-1】使用插件"><a href="#【7-1】使用插件" class="headerlink" title="【7.1】使用插件"></a>【7.1】使用插件</h4><p>如需使用某个插件，需要通过npm进行安装，然后在webpack.config.js配置文件的plugins配置项中添加该插件的实例，下面我们先来使用一个简单的版权声明插件。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.css结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(scss|sass)$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.scss和.sass结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// new一个插件的实例 </span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>运行npm run build 打包后，我们查看dist下面的handle.js文件</p><h4 id="【7-2】自动生成html文件（HtmlWebpackPlugin）"><a href="#【7-2】自动生成html文件（HtmlWebpackPlugin）" class="headerlink" title="【7.2】自动生成html文件（HtmlWebpackPlugin）"></a>【7.2】自动生成html文件（HtmlWebpackPlugin）</h4><p>到目前为止我们都是使用一开始建好的index.html文件，而且也是手动引入bundle.js，要是以后我们引入不止一个js文件，而且更改js文件名的话，也得手动更改index.html中的js文件名，所以能不能自动生成index.html且自动引用打包后的js呢？HtmlWebpackPlugin插件就是用来解决这个问题的我们对项目结构进行一些更改：</p><p>1 .把整个dist文件夹删除<br>2 .在src文件夹下新建一个index.html(名称自定义)文件模板（当然这个是可选的，因为就算不设置模板，HtmlWebpackPlugin插件也会生成默认html文件，这里我们设置模块会让我们的开发更加灵活），如下：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.html --></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>root<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>安装HtmlWebpackPlugin插件</p><pre class=" language-js"><code class="language-js">npm install html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span>D</code></pre><p>引入HtmlWebpackPlugin插件，并配置了引用了我们设置的模板，如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入HtmlWebpackPlugin插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.css结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(scss|sass)$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.scss和.sass结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// new一个插件的实例 </span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// new一个这个插件的实例，并传入相关的参数</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>运行npm run build进行打包，dist文件夹自动生成，包含index.html、bundle.js、bundle.js.map三个文件<br>为什么会自动生成dist文件夹呢？因为我们在output出口配置项中定义了出口文件所在的位置为dist文件夹，且出口文件名为bundle.js，所以HtmlWebpackPlugin会自动帮你在 dist/index.html 中引用名为bundle.js文件，如果你在webpack.config.js文件中更改了出口文件名，dist/index.html 中也会自动更改该文件名，这样以后修改起来是不是方便多了？</p><h4 id="【7-3】清理dist文件夹（CleanWebpackPlugin）"><a href="#【7-3】清理dist文件夹（CleanWebpackPlugin）" class="headerlink" title="【7.3】清理dist文件夹（CleanWebpackPlugin）"></a>【7.3】清理dist文件夹（CleanWebpackPlugin）</h4><p>webpack会生成文件，然后将这些文件放置在dist文件夹中，但是webpack无法追踪到哪些文件是实际在项目中用到的。通常，在每次构建前清理dist文件夹，是比较推荐的做法，因此只会生成用到的文件，这时候就用到CleanWebpackPlugin插件了。</p><pre class=" language-js"><code class="language-js">npm install clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span>D</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入HtmlWebpackPlugin插件</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入CleanWebpackPlugin插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.css结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(scss|sass)$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.scss和.sass结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// new一个插件的实例 </span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// new一个这个插件的实例，并传入相关的参数</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 默认删除output中path对应文件</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>现在我们每运行一次npm run build后就会发现，webpack会先将dist文件夹删除，然后再生产新的dist文件夹。</p><h4 id="【7-4】热更新（HotModuleReplacementPlugin）"><a href="#【7-4】热更新（HotModuleReplacementPlugin）" class="headerlink" title="【7.4】热更新（HotModuleReplacementPlugin）"></a>【7.4】热更新（HotModuleReplacementPlugin）</h4><p>HotModuleReplacementPlugin是一个很实用的插件，可以在我们修改代码后自动刷新预览效果。</p><p>设置方法:</p><blockquote><ul><li>devServer配置项中添加 hot：true 参数。</li><li>因为HotModuleReplacementPlugin是webpack模块自带的，所以引入webpack后，在plugins配置项中直接使用即可。</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入HtmlWebpackPlugin插件</span><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入CleanWebpackPlugin插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.css结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(scss|sass)$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.scss和.sass结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// new一个插件的实例 </span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// new一个这个插件的实例，并传入相关的参数</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 所要清理的文件夹名称</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 热更新插件 </span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>npm run dev 启动项目后，我们尝试着修改hello.js的内容，会发现浏览器预览效果会自动刷新</p><h3 id="八、项目优化及拓展"><a href="#八、项目优化及拓展" class="headerlink" title="八、项目优化及拓展"></a>八、项目优化及拓展</h3><h4 id="【8-1】代码分离"><a href="#【8-1】代码分离" class="headerlink" title="【8.1】代码分离"></a>【8.1】代码分离</h4><p>我们的webpack.config.js配置文件，其实也没配置多少东西就这么多了，要是以后增加了更多配置，岂不是看得眼花缭乱，所以最好的方法就是把它拆分，方便管理：<br>1、 我们在根目录下新建三个文件，分别为webpack.common.js、webpack.dev.js、webpack.prod.js分别代表公共配置文件、开发环境配置文件、生产环境（指项目上线时的环境）配置文件。<br>2、安装一个合并模块插件：</p><pre class=" language-js"><code class="language-js">npm install webpack<span class="token operator">-</span>merge <span class="token operator">-</span>D</code></pre><p>3、将webpack.config.js的代码拆分到上述新建的三个文件中，然后把将webpack.config.js文件删除，具体如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.common.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入HtmlWebpackPlugin插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.css结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(scss|sass)$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.scss和.sass结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// new一个插件的实例 </span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// new一个这个插件的实例，并传入相关的参数</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 热更新插件 </span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.dev.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 引入webpack-merge功能模块</span><span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.common.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入webpack.common.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 将webpack.common.js合并到当前文件</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>        contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        port<span class="token punctuation">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span>        inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        overlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.prod.js</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.common.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入CleanWebpackPlugin插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将webpack.common.js合并到当前文件</span>    devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>4、设置package.json的scripts命令</p><pre class=" language-js"><code class="language-js">  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config webpack.prod.js"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --open --config webpack.dev.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>  我们把build命令改为了webpack –config webpack.prod.js，意思是把打包配置指向webpack.prod.js配置文件，而之前我们只需要使用一个webpack 命令为什么就可以运行了？因为webpack 命令是默认指向webpack.config.js这个文件名称了，现在我们把文件名称改了，所以就需要自定义指向新的文件，dev命令中的指令也同理。然后我们运行npm run build 和npm run dev，效果应该和我们分离代码前是一样的。</p><h4 id="【8-2】多入口"><a href="#【8-2】多入口" class="headerlink" title="【8.2】多入口"></a>【8.2】多入口</h4><p>多出口到目前为止我们都是一个入口文件和一个出口文件，要是我不止一个入口文件呢？下面我们来试试：</p><p>在webpack.common.js中的entery入口有三种写法，分别为字符串、数组和对象，平时我们用得比较多的是对象，所以我们把它改为对象的写法，首先我们在src文件夹下新建index2.js文件，名称任意。因为有多个入口，所以肯定得多个出口来进行一一对应了，所以entry和output配置如下：</p><pre class=" language-js"><code class="language-js">    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>        index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        index2<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index2.js"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>        filename<span class="token punctuation">:</span> <span class="token string">"[name].js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index2.js</span><span class="token keyword">function</span> <span class="token function">page2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'我是第二个入口文件'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">page2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后我们运行npm run build打包后发现dist文件夹下会多出index2.js文件，同时index.html也会自动将index2.js引入，然后我们运行npm run dev显示如下：<br><a href="https://user-gold-cdn.xitu.io/2019/12/24/16f374c31dcc0a82?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">图</a></p><h4 id="【8-3】分离css"><a href="#【8-3】分离css" class="headerlink" title="【8.3】分离css"></a>【8.3】分离css</h4><p>webpack的理念是把css、js全都打包到一个文件里，但要是我们想把css分离出来该怎么做呢？</p><pre class=" language-js"><code class="language-js">npm install extract<span class="token operator">-</span>text<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin@next <span class="token operator">-</span>D  <span class="token comment" spellcheck="true">// 加上@next是为了安装最新的，否则会出错</span></code></pre><p>安装完以上插件后在webpack.common.js文件中引入并使用该插件：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.common.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入HtmlWebpackPlugin插件</span><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//引入分离插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>        index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        index2<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index2.js"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>        filename<span class="token punctuation">:</span> <span class="token string">"[name].js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.css结尾的文件</span>                use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里我们需要调用分离插件内的extract方法</span>                    fallback<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 相当于回滚，经css-loader处理过的css最终再经过style-loader处理</span>                    use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.(scss|sass)$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.scss和.sass结尾的文件</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// new一个插件的实例 </span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// new一个这个插件的实例，并传入相关的参数</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 热更新插件</span>        <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">'css/index.css'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将css分离到/dist文件夹下的css文件夹中的index.css </span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>运行npm run build后会发现dist文件夹下多一个css文件</p><h4 id="【8-4】消除冗余的css"><a href="#【8-4】消除冗余的css" class="headerlink" title="【8.4】消除冗余的css"></a>【8.4】消除冗余的css</h4><p>有时候我们css写得多了，可能会不自觉的写重复了一些样式，这就造成了多余的代码，上线前又忘了检查，对于这方面，我们应该尽量去优化它，webpack就有这个功能。</p><pre class=" language-js"><code class="language-js">npm install purifycss<span class="token operator">-</span>webpack purify<span class="token operator">-</span>css glob <span class="token operator">-</span>D</code></pre><p>安装完后在webpack.prod.js文件中进行配置，引入purifycss-webpack和glob插件并使用它们</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.prod.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.common.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入CleanWebpackPlugin插件</span><span class="token keyword">const</span> PurifyCssWebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'purifycss-webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入PurifyCssWebpack插件</span><span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'glob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 引入glob模块,用于扫描全部html文件中所引用的css</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将webpack.common.js合并到当前文件</span>    devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">PurifyCssWebpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            paths<span class="token punctuation">:</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/*.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 同步扫描所有html文件中所引用的css</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>我们在index.css文件中增加一些多余的代码试试：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* index.css */</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 冗余css */</span><span class="token selector"><span class="token class">.a</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 冗余css */</span><span class="token selector"><span class="token class">.b</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后我们运行npm run build后发现打包后的index.css中是没有多余的.a和.b代码的</p><h4 id="【8-5】处理图片"><a href="#【8-5】处理图片" class="headerlink" title="【8.5】处理图片"></a>【8.5】处理图片</h4><p>如果要使用图片，我们得安装两个loader</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 虽然我们只需使用url-loader，但url-loader是依赖于file-loader的，所以也要安装</span>npm install url<span class="token operator">-</span>loader file<span class="token operator">-</span>loader <span class="token operator">-</span>D </code></pre><p>然后在webpack.common.js中配置url-loader</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.common.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入HtmlWebpackPlugin插件</span><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//引入分离插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>        index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        index2<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index2.js"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方 </span>        filename<span class="token punctuation">:</span> <span class="token string">"[name].js"</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.css结尾的文件</span>                use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里我们需要调用分离插件内的extract方法</span>                    fallback<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 相当于回滚，经css-loader处理过的css最终再经过style-loader处理</span>                    use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.(scss|sass)$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.scss和.sass结尾的文件</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|svg|gif)$/</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 正则匹配图片格式名</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span>  <span class="token comment" spellcheck="true">// 使用url-loader }</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// new一个插件的实例 </span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/src/index.html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// new一个这个插件的实例，并传入相关的参数</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 热更新插件</span>        <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">'css/index.css'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将css分离到/dist文件夹下的css文件夹中的index.css </span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>我们把index.css的背景改为图片</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* index.css */</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url('./images/bg.jpg')</span> no-repeat<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">200</span>px <span class="token number">250</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们会发现背景图片变成了base64，因为webpack会自动优化图片，减少发送请求，但是如果我想把它变成路径的该怎么做？</p><p>我们可以把webpack.common.js的loader配置更改一下，增加options选项：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.css结尾的文件</span>        use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里我们需要调用分离插件内的extract方法</span>          fallback<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 相当于回滚，经css-loader处理过的css最终再经过style-loader处理</span>          use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          publicPath<span class="token punctuation">:</span> <span class="token string">'../'</span>  <span class="token comment" spellcheck="true">// 给背景图片设置一个公共路径</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(scss|sass)$/</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 正则匹配以.scss和.sass结尾的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|svg|gif)$/</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 正则匹配图片格式名</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 使用url-loader</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 限制只有小于1kb的图片才转为base64，例子图片为1.47kb,所以不会被转化</span>              outputPath<span class="token punctuation">:</span> <span class="token string">'images'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 设置打包后图片存放的文件夹名称</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h4 id="【8-6】压缩代码"><a href="#【8-6】压缩代码" class="headerlink" title="【8.6】压缩代码"></a>【8.6】压缩代码</h4><p>  在webpack4.x版本中当你打包时会自动把js压缩了，而且npm run dev运行服务器时，当你修改代码时，热更新很慢，这是因为你修改后webpack又自动为你打包，这就导致了在开发环境中效率很慢，所以我们需要把开发环境和生产环境区分开来，这时就体现出我们代码分离的便捷性了，webpack.dev.js代表开发环境的配置，webpack.prod.js代表生产环境的配置，这时我们只要在package.json文件中配置对应环境的命令即可：</p><pre class=" language-js"><code class="language-js">  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config webpack.prod.js --mode production"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --open --config webpack.dev.js --mode development"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>  –mode production表示打包时是生产环境，会自己将js进行压缩，而–mode development表示当前是开发环境，不需要进行压缩。这同时也解决了之前一直遗留的警告问题</p><p>作者：dingFY<br>链接：<a href="https://juejin.im/post/5e01de37f265da33ab637daf" target="_blank" rel="noopener">https://juejin.im/post/5e01de37f265da33ab637daf</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http2 与 http1.1 的区别</title>
      <link href="/2019/12/30/js-6/"/>
      <url>/2019/12/30/js-6/</url>
      
        <content type="html"><![CDATA[<h3 id="二进制分帧"><a href="#二进制分帧" class="headerlink" title="二进制分帧"></a>二进制分帧</h3><p>大家都知道HTTP1.X使用的是明文的文本（字符串）传送，而HTTP2使用的是二进制传送，二进制传送的单位是帧和流。帧组成了流，同时流还有流ID标示，通过流ID就牵扯出了第二个区别</p><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p>因为有流ID，所以通过同一个http请求实现多个http请求传输变成了可能，可以通过流ID来标示究竟是哪个流从而定位到是哪个http请求</p><h3 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h3><p>HTTP2通过gzip和compress压缩头部然后再发送，同时客户端和服务器端同时维护一张头信息表，所有字段都记录在这张表中，这样后面每次传输只需要传输表里面的索引Id就行，通过索引ID就可以知道表头的值了</p><h3 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h3><p>HTTP2支持在客户端未经请求许可的情况下，主动向客户端推送内容</p><p><a href="https://juejin.im/post/5b88a4f56fb9a01a0b31a67e" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是FOUC？如何避免FOUC</title>
      <link href="/2019/11/19/t-0/"/>
      <url>/2019/11/19/t-0/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是FOUC？如何避免FOUC？"><a href="#什么是FOUC？如何避免FOUC？" class="headerlink" title="什么是FOUC？如何避免FOUC？"></a>什么是FOUC？如何避免FOUC？</h2><p>FOUC即无样式内容闪烁（Flash Of Unstyled Content），是在IE下通过@import导入css文件引起的。</p><p>IE会首先加载整个HTML文档的DOM，然后再导入外部的css文件。因此，在页面DOM加载完成到css导入完成之间，有一段时间页面上的内容是没有样式的，这段时间的长短跟网速和电脑速度都有关系。</p><blockquote><ul><li>解决方法：在<head><meta name="generator" content="Hexo 3.9.0">之间加入一个<link>标签来导入css文件<link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event Loop 事件循环</title>
      <link href="/2019/11/07/js-5/"/>
      <url>/2019/11/07/js-5/</url>
      
        <content type="html"><![CDATA[<h2 id="JS为什么是单线程的"><a href="#JS为什么是单线程的" class="headerlink" title="JS为什么是单线程的?"></a>JS为什么是单线程的?</h2><p>最初设计JS是用来在浏览器验证表单操控DOM元素的是一门脚本语言，如果js是多线程的那么两个线程同时对一个DOM元素进行了相互冲突的操作，那么浏览器的解析器是无法执行的。</p><h2 id="JS为什么需要异步"><a href="#JS为什么需要异步" class="headerlink" title="JS为什么需要异步?"></a>JS为什么需要异步?</h2><p>如果JS中不存在异步，只能自上而下执行，如果上一行解析时间很长，那么下面的代码就会被阻塞。对于用户而言，阻塞就意味着”卡死”，这样就导致了很差的用户体验。比如在进行ajax请求的时候如果没有返回数据后面的代码就没办法执行。</p><h2 id="JS单线程又是如何实现异步的呢"><a href="#JS单线程又是如何实现异步的呢" class="headerlink" title="JS单线程又是如何实现异步的呢?"></a>JS单线程又是如何实现异步的呢?</h2><p>js中的异步以及多线程都可以理解成为一种“假象”，就拿h5的WebWorker来说，子线程有诸多限制，不能控制DOM元素、不能修改全局对象 等等，通常只用来做计算做数据处理。这些限制并没有违背我们之前的观点，所以说是“假象”。JS异步的执行机制其实就是事件循环(eventloop)，理解了eventloop机制，就理解了JS异步的执行机制。</p><h2 id="JS的事件循环-eventloop-是怎么运作的？"><a href="#JS的事件循环-eventloop-是怎么运作的？" class="headerlink" title="JS的事件循环(eventloop)是怎么运作的？"></a>JS的事件循环(eventloop)是怎么运作的？</h2><p>事件循环、eventloop、运行机制 这三个术语其实说的是同一个东西，在写这篇文章之前我一直以为事件循环简单的很，就是先执行同步操作，然后把异步操作排在事件队列里，等同步操作都运行完了（运行栈空闲），按顺序运行事件队列里的内容。但是远不止这么肤浅，我们接下来一步一步的深入来了解。</p><blockquote><ul><li>首先判断JS是同步还是异步，同步就进入主线程运行，异步就进入event table。</li></ul></blockquote><blockquote><ul><li>异步任务在event table中注册事件，当满足触发条件后（触发条件可能是延时也可能是ajax回调），被推入event queue</li></ul></blockquote><blockquote><ul><li>同步任务进入主线程后一直执行，直到主线程空闲时，才会去event queue中查看是否有可执行的异步任务，如果有就推入主线程中</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2秒到了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span></code></pre><p>  我们用上面的第二条来分析一下这段脚本，setTimeout是异步操作首先进入event table，注册的事件就是他的回调，触发条件就是2秒之后，当满足条件回调被推入event queue，当主线程空闲时会去event queue里查看是否有可执行的任务。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 同步任务进入主线程</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 异步任务，被放入event table， 0秒之后被推入event queue里</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 同步任务进入主线程</span></code></pre><p>  1、3是同步任务马上会被执行，执行完成之后主线程空闲去event queue(事件队列)里查看是否有任务在等待执行，这就是为什么setTimeout的延迟时间是0毫秒却在最后执行的原因。</p><h2 id="事件循环机制到底是怎么样的？"><a href="#事件循环机制到底是怎么样的？" class="headerlink" title="事件循环机制到底是怎么样的？"></a>事件循环机制到底是怎么样的？</h2><p>  不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同(宏任务)的Event Queue。而Promise和process.nextTick会进入相同(微任务)的Event Queue</p><p>上面的概念很基础也很容易理解但不幸的消息是上面讲的一切都不是绝对的正确，因为涉及到Promise、async/await、process.nextTick(node)所以要对任务有更精细的定义：</p><blockquote><p>宏任务(macro-task)：包括整体代码script，setTimeout，setInterval。<br>微任务(micro-task)：Promise，process.nextTick。</p></blockquote><blockquote><ul><li>1.「宏任务」、「微任务」都是队列，一段代码执行时，会先执行宏任务中的同步代码。</li><li>2.进行第一轮事件循环的时候会把全部的js脚本当成一个宏任务来运行。</li><li>3.如果执行中遇到setTimeout之类宏任务，那么就把这个setTimeout内部的函数推入「宏任务的队列」中，下一轮宏任务执行时调用。</li><li>4.如果执行中遇到 promise.then() 之类的微任务，就会推入到「当前宏任务的微任务队列」中，在本轮宏任务的同步代码都执行完成后，依次执行所有的微任务。</li><li>5.第一轮事件循环中当执行完全部的同步脚本以及微任务队列中的事件，这一轮事件循环就结束了，开始第二轮事件循环。</li><li>6.第二轮事件循环同理先执行同步脚本，遇到其他宏任务代码块继续追加到「宏任务的队列」中，遇到微任务，就会推入到「当前宏任务的微任务队列」中，在本轮宏任务的同步代码执行都完成后，依次执行当前所有的微任务。</li><li>7.开始第三轮，循环往复…</li></ul></blockquote><p>下面用代码来深入理解上面的机制：</p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 同步任务</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.这段代码作为宏任务，进入主线程。</span><span class="token comment" spellcheck="true">// 2.先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。</span><span class="token comment" spellcheck="true">// 3.接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。</span><span class="token comment" spellcheck="true">// 4.遇到console.log()，立即执行。</span><span class="token comment" spellcheck="true">// 5.整体代码script作为第一个宏任务执行结束。查看当前有没有可执行的微任务，执行then的回调。</span><span class="token comment" spellcheck="true">//（第一轮事件循环结束了，我们开始第二轮循环。）</span><span class="token comment" spellcheck="true">// 6.从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。</span><span class="token comment" spellcheck="true">// 执行结果：1 - 2 - 3 - 4</span></code></pre><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span>    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。</span><span class="token comment" spellcheck="true">// (请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)</span></code></pre><p>1.整体script作为第一个宏任务进入主线程，遇到console.log(1)输出1。<br>2.遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。<br>3.遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。<br>4.遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。<br>5.又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。<br>6.现在开始执行微任务，我们发现了process1和then1两个微任务，执行process1,输出6。执行then1，输出8。<br>第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。</p><p>那么第二轮事件循环从setTimeout1宏任务开始：<br>1.首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，记为process2。<br>2.new Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。<br>3.现在开始执行微任务，我们发现有process2和then2两个微任务可以执行输出3，5。<br>第二轮事件循环结束，第二轮输出2，4，3，5。第三轮事件循环从setTimeout2宏任务开始：<br>1.直接输出9，将process.nextTick()分发到微任务Event Queue中。记为process3。<br>2.直接执行new Promise，输出11。将then分发到微任务Event Queue中，记为then3。<br>3.执行两个微任务process3和then3。输出10。输出12。<br>第三轮事件循环结束，第三轮输出9，11，10，12。</p><h3 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 宏任务一</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 宏任务一的微任务</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 宏任务二</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 宏任务五</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 宏任务七</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 宏任务三</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 宏任务四</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 宏任务六</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 宏任务一</span><span class="token comment" spellcheck="true">//  完整的输出为 1,2,3,4,5,67,8,9,10,11,12</span></code></pre><p>1.全部的代码作为第一个宏任务进入主线程执行。<br>2.首先输出1，是同步代码。then回调作为微任务进入到宏任务一的微任务队列。<br>3.下面最外层的三个setTimeout分别是宏任务二、宏任务三、宏任务四按序排入宏任务队列。<br>4.输出2，现在宏任务一的同步代码都执行完成了接下来执行宏任务一的微任务输出3。<br>第一轮事件循环完成了<br>5.现在执行宏任务二输出4，后面的setTimeout作为宏任务五排入宏任务队列。<br>第二轮事件循环完成了<br>6.执行宏任务三输出5，执行宏任务四输出6，宏任务四里面的setTimeout作为宏任务六。<br>7.执行宏任务五输出7，8。then回调作为宏任务五的微任务排入宏任务五的微任务队列。<br>8.输出同步代码9，宏任务五的同步代码执行完了，现在执行宏任务五的微任务。<br>9.输出10，后面的setTimeout作为宏任务七排入宏任务的队列。<br>宏任务五执行完成了，当前已经是第五轮事件循环了。<br>10.执行宏任务六输出11，执行宏任务七输出12，</p><p>-^-，这个案例是有点恶心，目的是让大家明白各宏任务之间执行的顺序以及宏任务和微任务的执行关系。</p><p>初步总结：<br>宏任务是一个栈按先入先执行的原则，微任务也是一个栈也是先入先执行。<br>但是每个宏任务都对应会有一个微任务栈，宏任务在执行过程中会先执行同步代码再执行微任务栈。</p><p>上面的案例只是用setTimeout和Promise模拟了一些场景来帮助理解，并没有用到async/await下面我们从什么是async/await开始讲起。</p><h2 id="async-await是什么？"><a href="#async-await是什么？" class="headerlink" title="async/await是什么？"></a>async/await是什么？</h2><p>我们创建了 promise 但不能同步等待它执行完成。我们只能通过 then 传一个回调函数这样很容易再次陷入 promise 的回调地狱。实际上，async/await 在底层转换成了 promise 和 then 回调函数。也就是说，这是 promise 的语法糖。每次我们使用 await, 解释器都创建一个 promise 对象，然后把剩下的 async 函数中的操作放到 then 回调函数中。async/await 的实现，离不开 Promise。从字面意思来理解，async 是“异步”的简写，而 await 是 async wait 的简写可以认为是等待异步方法执行完成。</p><h2 id="async-await用来干什么？"><a href="#async-await用来干什么？" class="headerlink" title="async/await用来干什么？"></a>async/await用来干什么？</h2><p>用来优化 promise 的回调问题，被称作是异步的终极解决方案。</p><h2 id="async-await内部做了什么？"><a href="#async-await内部做了什么？" class="headerlink" title="async/await内部做了什么？"></a>async/await内部做了什么？</h2><p>async 函数会返回一个 Promise 对象，如果在函数中 return 一个直接量（普通变量），async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。如果你返回了promise那就以你返回的promise为准。<br>await 是在等待，等待运行的结果也就是返回值。await后面通常是一个异步操作（promise），但是这不代表 await 后面只能跟异步操作 await 后面实际是可以接普通函数调用或者直接量的。</p><h2 id="await的等待机制？"><a href="#await的等待机制？" class="headerlink" title="await的等待机制？"></a>await的等待机制？</h2><p>如果 await 后面跟的不是一个 Promise，那 await 后面表达式的运算结果就是它等到的东西；如果 await 后面跟的是一个 Promise 对象，await 它会“阻塞”后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值作为 await 表达式的运算结果。但是此“阻塞”非彼“阻塞”这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成“阻塞”，它内部所有的“阻塞”都被封装在一个 Promise 对象中异步执行。（这里的阻塞理解成异步等待更合理）</p><h2 id="async-await在使用过程中有什么规定？"><a href="#async-await在使用过程中有什么规定？" class="headerlink" title="async/await在使用过程中有什么规定？"></a>async/await在使用过程中有什么规定？</h2><p>每个 async 方法都返回一个 promise 对象。await 只能出现在 async 函数中。</p><h2 id="async-await-在什么场景使用？"><a href="#async-await-在什么场景使用？" class="headerlink" title="async/await 在什么场景使用？"></a>async/await 在什么场景使用？</h2><p>单一的 Promise 链并不能发现 async/await 的优势，但是如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。</p><h2 id="async-await如何使用？"><a href="#async-await如何使用？" class="headerlink" title="async/await如何使用？"></a>async/await如何使用？</h2><p>假设一个业务，分多个步骤完成，每个步骤都是异步的且依赖于上一个步骤的结果。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myPromise</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">step1</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">myPromise</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">step2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">myPromise</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">step3</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">myPromise</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果用 Promise 实现</span><span class="token function">step1</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">></span> <span class="token function">step2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b <span class="token operator">=</span><span class="token operator">></span> <span class="token function">step3</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果用 async/await 来实现呢</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">step2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">step3</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token function">myResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果myResult内部有语法错误会触发catch方法</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>看的出来async/await的写法更加优雅一些要比Promise的链式调用更加直观也易于维护。</p><p>我们来看在任务队列中async/await的运行机制，先给出大概方向再通过案例来证明：</p><blockquote><ul><li>1.async定义的是一个Promise函数和普通函数一样只要不调用就不会进入事件队列。</li><li>2.async内部如果没有主动return Promise，那么async会把函数的返回值用Promise包装。</li><li>3.await关键字必须出现在async函数中，await后面不是必须要跟一个异步操作，也可以是一个普通表达式。</li><li>4.遇到await关键字，await右边的语句会被立即执行然后await下面的代码进入等待状态，等待await得到结果。</li><li>5.await后面如果不是 promise 对象, await会阻塞后面的代码，先执行async外面的同步代码，同步代码执行完，再回到async内部，把这个非promise的东西，作为 await表达式的结果。</li><li>6.await后面如果是 promise 对象，await 也会暂停async后面的代码，先执行async外面的同步代码，等着 Promise 对象 fulfilled，然后把 resolve 的参数作为 await 表达式的运算结果。</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span></code></pre><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>1.6是宏任务在下一轮事件循环执行<br>2.先同步输出1，然后调用了async1()，输出2。<br>3.await async2() 会先运行async2()，5进入等待状态。<br>4.输出3，这个时候先执行async函数外的同步代码输出4。<br>5.最后await拿到等待的结果继续往下执行输出5。<br>6.进入第二轮事件循环输出6。</p><h3 id="示例四"><a href="#示例四" class="headerlink" title="示例四"></a>示例四</h3><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token string">'await的结果'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*1.首先输出1，然后进入async1()函数，输出2。2.await后面虽然是一个直接量，但是还是会先执行async函数外的同步代码。3.输出3，进入Promise输出4，then回调进入微任务队列。4.现在同步代码执行完了，回到async函数继续执行输出5。5.最后运行微任务输出6。*/</span></code></pre><h3 id="示例五"><a href="#示例五" class="headerlink" title="示例五"></a>示例五</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*1.首先输出同步代码1，然后进入async1方法输出2。2.因为遇到await所以先进入async2方法，后面的7处于等待状态。3.在async2中输出3，现在跳出async函数先执行外面的同步代码。4.输出4，5。then回调进入微任务栈。5.现在宏任务执行完了，执行微任务输出6。6.然后回到async1函数接着往下执行输出7*/</span></code></pre><h3 id="示例六"><a href="#示例六" class="headerlink" title="示例六"></a>示例六</h3><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*1.先输出1，2，3。3后面的then进入微任务队列。2.执行外面的同步代码，输出4，5。4后面的then进入微任务队列。4.接下来执行微任务，因为3后面的then先进入，所以按序输出6，7。5.下面回到async1函数，await关键字等到了结果继续往下执行。6.输出8，进行下一轮事件循环也就是宏任务二，输出9。*/</span></code></pre><h3 id="示例七"><a href="#示例七" class="headerlink" title="示例七"></a>示例七</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'await的结果'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*1.函数async1和async2只是定义先不去管他，首先输出1。2.setTimeout作为宏任务进入宏任务队列等待下一轮事件循环。3.进入async1()函数输出2，await下面的代码进入等待状态。4.进入async2()输出3，then回调进入微任务队列。5.现在执行外面的同步代码，输出4，5，then回调进入微任务队列。6.按序执行微任务，输出6，7。现在回到async1函数。7.输出data，也就是await关键字等到的内容，接着输出8。8.进行下一轮时间循环输出9。执行结果：1 - 2 - 3 - 4 - 5 - 6 - 7 - await的结果 - 8 - 9*/</span></code></pre><h3 id="示例八"><a href="#示例八" class="headerlink" title="示例八"></a>示例八</h3><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> data<span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'async2的结果'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*1.setTimeout作为宏任务进入宏任务队列等待下一轮事件循环。2.先执行async1函数，输出1，6进入等待状态，现在执行async2。3.输出2，then回调进入微任务队列。4.接下来执行外面的同步代码输出3，then回调进入微任务队列。5.按序执行微任务，输出4，5。下面回到async1函数。6.输出了4之后执行了return data，await拿到了内容。7.继续执行输出6，执行了后面的 return data 才触发了async1()的then回调输出7以及data。8.进行第二轮事件循环输出8。执行结果：1 - 2 - 3 -4 - 5 - 6 - 7 - async2的结果 - 8*/</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Event Loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宏任务/微任务</title>
      <link href="/2019/11/07/js-4/"/>
      <url>/2019/11/07/js-4/</url>
      
        <content type="html"><![CDATA[<p>首先，JavaScript是一个单线程的脚本语言。</p><h2 id="微任务与宏任务的概念"><a href="#微任务与宏任务的概念" class="headerlink" title="微任务与宏任务的概念"></a>微任务与宏任务的概念</h2><blockquote><ul><li>宏任务：当前调用栈中执行的代码成为宏任务。（主代码快，定时器等等）。</li></ul></blockquote><blockquote><ul><li>微任务： 当前（此次事件循环中）宏任务执行完，在下一个宏任务开始之前需要执行的任务,可以理解为回调事件。（promise.then，proness.nextTick等等）。 </li></ul></blockquote><blockquote><ul><li>宏任务中的事件放在callback queue中，由事件触发线程维护；微任务的事件放在微任务队列中，由js引擎线程维护。</li></ul></blockquote><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><ol><li>在执行栈中执行一个宏任务。 </li></ol><ol start="2"><li><p>执行过程中遇到微任务，将微任务添加到微任务队列中。</p></li><li><p>当前宏任务执行完毕，立即执行微任务队列中的任务。 </p></li><li><p>当前微任务队列中的任务执行完毕，检查渲染，GUI线程接管渲染。 </p></li><li><p>渲染完毕后，js线程接管，开启下一次事件循环，执行下一次宏任务（事件队列中取）。</p></li></ol><h3 id="微任务："><a href="#微任务：" class="headerlink" title="微任务："></a>微任务：</h3><pre class=" language-js"><code class="language-js">process<span class="token punctuation">.</span>nextTickMutationObserverPromise<span class="token punctuation">.</span>thenprocess<span class="token punctuation">.</span>nextTick <span class="token operator">></span> Promise<span class="token punctuation">.</span>then <span class="token operator">></span> MutationObserver <span class="token comment" spellcheck="true">// 优先级</span></code></pre><h3 id="宏任务："><a href="#宏任务：" class="headerlink" title="宏任务："></a>宏任务：</h3><pre><code>```jsscriptI/OsetTimeout()setInterval()setImmediate()// setImmediate 回调函数requestAnimationFrame主代码块 &gt; setImmediate &gt; MessageChannel &gt; setTimeout / setInterval  // 优先级```</code></pre><p>注: 首先执行script下的宏任务,遇到setTimeout,将其放到宏任务的【队列】里</p><h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'代码块'</span><span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器开始啦'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'马上执行for循环啦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行then函数啦'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'代码执行结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">首先执行script下的宏任务<span class="token punctuation">,</span>遇到setTimeout<span class="token punctuation">,</span>将其放到宏任务的【队列】里遇到 <span class="token keyword">new</span> <span class="token class-name">Promise</span>直接执行<span class="token punctuation">,</span>打印<span class="token string">"马上执行for循环啦"</span>遇到then方法<span class="token punctuation">,</span>是微任务<span class="token punctuation">,</span>将其放到微任务的【队列里】打印 <span class="token string">"代码执行结束"</span>本轮宏任务执行完毕<span class="token punctuation">,</span>查看本轮的微任务<span class="token punctuation">,</span>发现有一个then方法里的函数<span class="token punctuation">,</span> 打印<span class="token string">"执行then函数啦"</span>到此<span class="token punctuation">,</span>本轮的event loop 全部完成。下一轮的循环里<span class="token punctuation">,</span>先执行一个宏任务<span class="token punctuation">,</span>发现宏任务的【队列】里有一个 setTimeout里的函数<span class="token punctuation">,</span>执行打印<span class="token string">"定时器开始啦"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES2019 的新特性</title>
      <link href="/2019/11/06/js-3/"/>
      <url>/2019/11/06/js-3/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 不断演变，每次迭代都会得到一些新的内部更新。让我们来看看 ES2019 有哪些新的特性，并加入到我们日常开发中:</p><h2 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a>Array.prototype.flat()</h2><p><code>Array.prototype.flat()</code> 递归地将嵌套数组拼合到指定深度。默认值为 1，如果要全深度则使用 Infinity 。此方法不会修改原始数组，但会创建一个新数组:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4]</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6]</span><span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6, 7, 8]</span></code></pre><p>flat() 方法会移除数组中的空项:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr4<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 4, 5]</span></code></pre><h2 id="Array-prototype-flatMap"><a href="#Array-prototype-flatMap" class="headerlink" title="Array.prototype.flatMap()"></a>Array.prototype.flatMap()</h2><p><code>flatMap()</code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <code>Array.prototype.map</code> 和 深度值为 1的 <code>Array.prototype.flat</code> 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>v<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [ [4], [8], [12] ]</span>arr1<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span> v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>v<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [4, 8, 12]</span></code></pre><p>更好的示例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> sentence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"This is a"</span><span class="token punctuation">,</span> <span class="token string">"regular"</span><span class="token punctuation">,</span> <span class="token string">"sentence"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>sentence<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [["This","is","a"],["regular"],["sentence"]]</span>sentence<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["This","is","a","regular", "sentence"]</span><span class="token comment" spellcheck="true">// 可以使用 归纳（reduce） 与 合并（concat）实现相同的功能</span>sentence<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="String-prototype-trimStart-和-String-prototype-trimEnd"><a href="#String-prototype-trimStart-和-String-prototype-trimEnd" class="headerlink" title="String.prototype.trimStart() 和 String.prototype.trimEnd()"></a>String.prototype.trimStart() 和 String.prototype.trimEnd()</h2><p>除了能从字符串两端删除空白字符的 String.prototype.trim() 之外，现在还有单独的方法，只能从每一端删除空格:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token string">" hello "</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello";</span>test<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello ";</span>test<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// " hello";</span></code></pre><blockquote><ul><li>trimStart() ：别名 trimLeft()，移除原字符串左端的连续空白符并返回，并不会直接修改原字符串本身。</li><li>trimEnd() ：别名 trimRight()，移除原字符串右端的连续空白符并返回，并不会直接修改原字符串本身。</li></ul></blockquote><h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h2><p>将键值对列表转换为 Object 的新方法。<br>它与已有 Object.entries() 正好相反，Object.entries()方法在将对象转换为数组时使用，它返回一个给定对象自身可枚举属性的键值对数组。<br>但现在您可以通过 Object.fromEntries 将操作的数组返回到对象中。<br>下面是一个示例（将所有对象属性的值平方）:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> prop1<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> prop2<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> prop3<span class="token punctuation">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 转化为键值对数组：</span><span class="token keyword">let</span> array <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [["prop1", 2], ["prop2", 10], ["prop3", 15]]</span></code></pre><p>将所有对象属性的值平方:</p><pre class=" language-js"><code class="language-js">array <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [["prop1", 4], ["prop2", 100], ["prop3", 225]]</span></code></pre><p>我们将转换后的数组 array 作为参数传入 Object.fromEntries ，将数组转换成了一个对象:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {prop1: 4, prop2: 100, prop3: 225}</span></code></pre><h2 id="可选的-Catch-参数"><a href="#可选的-Catch-参数" class="headerlink" title="可选的 Catch 参数"></a>可选的 Catch 参数</h2><p>新提案允许您完全省略 catch() 参数，因为在许多情况下，您并不想使用它:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">er</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//handle error with parameter er</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//handle error without parameter</span><span class="token punctuation">}</span></code></pre><h2 id="Symbol-description"><a href="#Symbol-description" class="headerlink" title="Symbol.description"></a>Symbol.description</h2><p>description 是一个只读属性，它会返回 Symbol 对象的可选描述的字符串，用来代替 toString() 方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> testSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"Desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>testSymbol<span class="token punctuation">.</span>description<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Desc"</span>testSymbol<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Symbol(Desc)"</span></code></pre><h2 id="Function-toString"><a href="#Function-toString" class="headerlink" title="Function.toString()"></a>Function.toString()</h2><p>现在,在函数上调用 toString() 会返回该函数（字符串形式），与它的定义完全一样，包括空格和注释。<br>之前：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token comment" spellcheck="true">/* foo comment */</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "function foo() {}"</span></code></pre><p>现在：</p><pre class=" language-js"><code class="language-js">foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "function </span><span class="token comment" spellcheck="true">/* foo comment */</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>"</code></pre><h2 id="JSON-parse-改进"><a href="#JSON-parse-改进" class="headerlink" title="JSON.parse() 改进"></a>JSON.parse() 改进</h2><p>行分隔符 (\u2028) 和段落分隔符 (\u2029)，现在被正确解析，而不是报一个语法错误.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'{"name":"Bottle\u2028AnGe"}'</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {name: "Bottle</span>AnGe"<span class="token punctuation">}</span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><a href="https://blog.tildeloop.com/posts/javascript-what%E2%80%99s-new-in-es2019" target="_blank" rel="noopener">原文链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ES9 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="/2019/10/25/js-2/"/>
      <url>/2019/10/25/js-2/</url>
      
        <content type="html"><![CDATA[<h2 id="document-load和document-ready的区别"><a href="#document-load和document-ready的区别" class="headerlink" title="document.load和document.ready的区别"></a>document.load和document.ready的区别</h2><h3 id="页面加载完成有两种事件"><a href="#页面加载完成有两种事件" class="headerlink" title="页面加载完成有两种事件"></a>页面加载完成有两种事件</h3><ol><li><p>load是当页面所有资源全部加载完成后（包括DOM文档树，css文件，js文件，图片资源等），执行一个函数<br>问题：如果图片资源较多，加载时间较长，onload后等待执行的函数需要等待较长时间，所以一些效果可能受到影响</p></li><li><p>$(document).ready()是当DOM文档树加载完成后执行一个函数 （不包含图片，css等）所以会比load较快执行<br>在原生的jS中不包括ready()这个方法，只有load方法就是onload事件</p></li></ol><h2 id="JavaScript-中如何检测一个变量是一个-数据类型"><a href="#JavaScript-中如何检测一个变量是一个-数据类型" class="headerlink" title="JavaScript 中如何检测一个变量是一个 数据类型"></a>JavaScript 中如何检测一个变量是一个 数据类型</h2><blockquote><ul><li>万能prototype方法<pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> ‘<span class="token punctuation">[</span>object String<span class="token punctuation">]</span>’<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">===</span> ‘<span class="token punctuation">[</span>object Number<span class="token punctuation">]</span>’<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">===</span> ‘<span class="token punctuation">[</span>object Array<span class="token punctuation">]</span>’<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">===</span> ‘<span class="token punctuation">[</span>object Date<span class="token punctuation">]</span>’<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">===</span> ‘<span class="token punctuation">[</span>object Function<span class="token punctuation">]</span>’<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">===</span> ‘<span class="token punctuation">[</span>object Function<span class="token punctuation">]</span>’<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><a href="https://www.cnblogs.com/gaoht/p/10494642.html" target="_blank" rel="noopener">更多</a></li></ul></blockquote><h2 id="请用-js-去除字符串空格"><a href="#请用-js-去除字符串空格" class="headerlink" title="请用 js 去除字符串空格"></a>请用 js 去除字符串空格</h2><blockquote><ul><li>replace 正则匹配方法、</li></ul></blockquote><p>去除字符串内所有的空格：<code>str = str.replace(/\s*/g,&quot;&quot;)</code>;<br>去除字符串内两头的空格：<code>str = str.replace(/^\s*|\s*$/g,&quot;&quot;)</code>;<br>去除字符串内左侧的空格：<code>str = str.replace(/^\s*/,&quot;&quot;)</code>;<br>去除字符串内右侧的空格：<code>str = str.replace(/(\s*$)/g,&quot;&quot;)</code>;</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">" 6 6 "</span><span class="token punctuation">;</span><span class="token keyword">var</span> str_1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s*/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//66</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">" 6 6 "</span><span class="token punctuation">;</span><span class="token keyword">var</span> str_1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\s*|\s*$/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//6 6//输出左右侧均无空格</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">" 6 6 "</span><span class="token punctuation">;</span><span class="token keyword">var</span> str_1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\s*/</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//6 6 //输出右侧有空格左侧无空格</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">" 6 6 "</span><span class="token punctuation">;</span><span class="token keyword">var</span> str_1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\s*$)/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6 6//输出左侧有空格右侧无空格</span></code></pre><blockquote><ul><li>str.trim()方法、<br>trim()方法是用来删除字符串两端的空白字符并返回，trim 方法并不影响原来的字符串本身，它返回的是一个新的字符串。<br>缺陷：只能去除字符串两端的空格，不能去除中间的空格</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">" 6 6 "</span><span class="token punctuation">;</span><span class="token keyword">var</span> str_1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//6 6//输出左右侧均无空格</span></code></pre><blockquote><ul><li>JQ 方法：$.trim(str)方法</li></ul></blockquote><p>$.trim() 函数用于去除字符串两端的空白字符。</p><p>注意：$.trim()函数会移除字符串开始和末尾处的所有换行符，空格(包括连续的空格)和制表符。如果这些空白字符在字符串中间时，它们将被保留，不会被移除。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">" 6 6 "</span><span class="token punctuation">;</span><span class="token keyword">var</span> str_1 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//6 6//输出左右侧均无空格</span></code></pre><h2 id="require-与-import-的区别"><a href="#require-与-import-的区别" class="headerlink" title="require 与 import 的区别"></a>require 与 import 的区别</h2><blockquote><ul><li>两者的加载方式不同、规范不同</li><li>两者的加载方式不同，require 是在运行时加载，而 import 是在编译时加载</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a 模块是一个函数，立即执行 a 模块函数</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a 模块导出的是一个对象</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a 模块导出的是一个数组 ======> 哪都行</span><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> _ <span class="token keyword">from</span> <span class="token string">'_'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./a'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token keyword">default</span> <span class="token keyword">as</span> alias<span class="token punctuation">,</span> a <span class="token keyword">as</span> a_a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./a'</span><span class="token punctuation">;</span> <span class="token operator">===</span><span class="token operator">===</span><span class="token operator">></span>用在开头</code></pre><blockquote><ul><li>规范不同，require 是 CommonJS/AMD 规范，import 是 ESMAScript6+规范</li><li>require 特点：社区方案，提供了服务器/浏览器的模块加载方案。非语言层面的标准。只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。</li><li>import 特点：语言规格层面支持模块功能。支持编译时静态分析，便于 JS 引入宏和类型检验。动态绑定</li></ul></blockquote><h2 id="在-css-js-代码上线之后开发人员经常会优化性能"><a href="#在-css-js-代码上线之后开发人员经常会优化性能" class="headerlink" title="在 css/js 代码上线之后开发人员经常会优化性能"></a>在 css/js 代码上线之后开发人员经常会优化性能</h2><pre><code>从用户刷新网页开始，一次 js 请求一般情况下有哪些地方会有缓存处理dns 缓存，cdn 缓存，浏览器缓存，服务器缓存。</code></pre><h2 id="JavaScript-继承的方式和优缺点"><a href="#JavaScript-继承的方式和优缺点" class="headerlink" title=".JavaScript 继承的方式和优缺点"></a>.JavaScript 继承的方式和优缺点</h2><blockquote><ul><li>原型链继承</li></ul></blockquote><pre><code>缺点：1.引用类型的属性被所有实例共享2.在创建 Child 的实例时，不能向 Parent 传参</code></pre><blockquote><ul><li>借用构造函数(经典继承)</li></ul></blockquote><pre><code>优点：1.避免了引用类型的属性被所有实例共享2.可以在 Child 中向 Parent 传参缺点：1.方法都在构造函数中定义，每次创建实例都会创建一遍方法。</code></pre><blockquote><ul><li>组合继承</li></ul></blockquote><pre><code>优点：1.融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。</code></pre><blockquote><ul><li>原型式继承</li></ul></blockquote><pre><code>缺点：1.包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。</code></pre><blockquote><ul><li>寄生式继承</li></ul></blockquote><pre><code>缺点：1.跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</code></pre><blockquote><ul><li>寄生组合式继承</li></ul></blockquote><pre><code>优点：1.这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。2.与此同时，原型链还能保持不变；3.因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式</code></pre><h2 id="如何判断-NaN"><a href="#如何判断-NaN" class="headerlink" title="如何判断 NaN"></a>如何判断 NaN</h2><pre><code>```jsisNaN(NaN) // true```</code></pre><h2 id="如何阻止冒泡与默认行为"><a href="#如何阻止冒泡与默认行为" class="headerlink" title="如何阻止冒泡与默认行为"></a>如何阻止冒泡与默认行为</h2><blockquote><ul><li>阻止冒泡行为：非 IE 浏览器 stopPropagation()，IE 浏览器 window.event.cancelBubble = true</li><li>阻止默认行为：非 IE 浏览器 preventDefault()，IE 浏览器 window.event.returnValue = false</li></ul></blockquote><p>当需要阻止冒泡行为时，可以使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">stopBubble</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果提供了事件对象，则这是一个非IE浏览器</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//因此它支持W3C的stopPropagation()方法</span>    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//否则，我们需要使用IE的方式来取消事件冒泡</span>  <span class="token keyword">else</span> window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当需要阻止默认行为时，可以使用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//阻止浏览器的默认行为</span><span class="token keyword">function</span> <span class="token function">stopDefault</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//阻止默认浏览器动作(W3C)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//IE中阻止函数器默认动作的方式</span>  <span class="token keyword">else</span> window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue与React两个框架的区别</title>
      <link href="/2019/10/24/js-1/"/>
      <url>/2019/10/24/js-1/</url>
      
        <content type="html"><![CDATA[<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><h3 id="Vue中数据绑定"><a href="#Vue中数据绑定" class="headerlink" title="Vue中数据绑定"></a>Vue中数据绑定</h3><blockquote><ul><li>vue是双向绑定， Vue.js 最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。所谓双向绑定，指的是vue实例中的data与其渲染的DOM元素的内容保持一致，无论谁被改变，另一方会相应的更新为相同的数据</li></ul></blockquote><h3 id="react没有数据双向绑定"><a href="#react没有数据双向绑定" class="headerlink" title="react没有数据双向绑定"></a>react没有数据双向绑定</h3><blockquote><ul><li>react是单向数据流</li><li>react中通过将state（Model层）与View层数据进行双向绑定达数据的实时更新变化，具体来说就是在View层直接写JS代码Model层中的数据拿过来渲染，一旦像表单操作、触发事件、ajax请求等触发数据变化，则进行双同步</li></ul></blockquote><h2 id="监听数据变化的实现原理不同"><a href="#监听数据变化的实现原理不同" class="headerlink" title="监听数据变化的实现原理不同"></a>监听数据变化的实现原理不同</h2><blockquote><ul><li>Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能</li><li>React 默认是通过比较引用的方式进行的，如果不优化（PureComponent/shouldComponentUpdate）可能导致大量不必要的VDOM的重新渲染</li></ul></blockquote><p>为什么 React 不精确监听数据变化呢？这是因为 Vue 和 React 设计理念上的区别，Vue 使用的是可变数据，而React更强调数据的不可变。所以应该说没有好坏之分，Vue更加简单，而React构建大型应用的时候更加鲁棒。因为一般都会用一个数据层的框架比如 Vuex 和 Redux，所以这部分不作过多解释了.</p><h2 id="数据流的不同"><a href="#数据流的不同" class="headerlink" title="数据流的不同"></a>数据流的不同</h2><p><img src="/loading.gif" data-original="http://pz3r750z8.bkt.clouddn.com/1571907725343.jpg" alt="数据流"><br>大家都知道Vue中默认是支持双向绑定的。</p><blockquote><ul><li>Vue1.0中我们可以实现两种双向绑定：<br>  父子组件之间，props 可以双向绑定。<br>  组件与DOM之间可以通过 v-model 双向绑定。</li><li>Vue2.x 中去掉了第一种，也就是父子组件之间不能双向绑定了（但是提供了一个语法糖自动帮你通过事件的方式修改），并且 Vue2.x 已经不鼓励组件对自己的 props 进行任何修改了。<br>所以现在我们只有 组件 &lt;–&gt; DOM 之间的双向绑定这一种。</li><li>React 从诞生之初就不支持双向绑定，React一直提倡的是单向数据流，他称之为 onChange/setState()模式。<br>不过由于我们一般都会用 Vuex 以及 Redux 等单向数据流的状态管理框架，因此很多时候我们感受不到这一点的区别了</li></ul></blockquote><h2 id="渲染性能对比"><a href="#渲染性能对比" class="headerlink" title="渲染性能对比"></a>渲染性能对比</h2><p>在操作界面时，要尽量减少对DOM的操作，Vue 和 React 都使用虚拟DOM来实现，并且两者工作一样好。<br>尽量减少除DOM操作以外的其他操作。（vue和react的不同）</p><h2 id="React-js的优点："><a href="#React-js的优点：" class="headerlink" title="React.js的优点："></a>React.js的优点：</h2><blockquote><ul><li>灵活性和响应性：它提供最大的灵活性和响应能力。</li><li>虚拟DOM：由于它基于文档对象模型，因此它允许浏览器友好地以HTML，XHTML或XML格式排列文档。</li><li>丰富的JavaScript库：来自世界各地的贡献者正在努力添加更多功能。</li><li>可扩展性：由于其灵活的结构和可扩展性，React已被证明对大型应用程序更好。</li><li>不断发展： React得到了Facebook专业开发人员的支持，他们不断寻找改进方法。</li><li>Web或移动平台： React提供ReactNative平台，可通过相同的React组件模型为iOS和Android开发本机呈现的应用程序。无论是Web还是本机移动开发，React都是大多数用户界面设计平台的理想选择。</li></ul></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结一下，我们发现， </p><blockquote><ul><li>Vue的优势包括： </li><li>模板和渲染函数的弹性选择 </li><li>简单的语法及项目创建 </li><li>更快的渲染速度和更小的体积 </li><li>React的优势包括： </li><li>更适用于大型应用和更好的可测试性 </li><li>同时适用于Web端和原生App </li><li>更大的生态圈带来的更多支持和工具 </li><li>而实际上，React和Vue都是非常优秀的框架，它们之间的相似之处多过不同之处，并且它们大部分最棒的功能是相通的： </li><li>利用虚拟DOM实现快速渲染 </li><li>轻量级 </li><li>响应式和组件化 </li><li>服务器端渲染 </li><li>易于集成路由工具，打包工具以及状态管理工具 </li><li>优秀的支持和社区<br>————————————————</li></ul></blockquote><p>文章参考来源：</p><blockquote><ul><li><a href="https://cn.vuejs.org/v2/guide/comparison.html" target="_blank" rel="noopener">vue官方文档关于框架的对比</a></li><li><a href="https://react.docschina.org/" target="_blank" rel="noopener">react中文文档</a></li><li><a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">vue官方文档</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从输入url到页面展示到底发生了什么</title>
      <link href="/2019/10/23/day/"/>
      <url>/2019/10/23/day/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚开始写这篇文章还是挺纠结的，因为网上搜索“从输入url到页面展示到底发生了什么”，你可以搜到一大堆的资料。而且面试这道题基本是必考题，二月份面试的时候，虽然知道这个过程发生了什么，不过当面试官一步步追问下去的，很多细节就不太清楚了。<br>最近刚好也在看http协议相关的东西，所以想对这个话题来个深入的总结，本文的目的是通过输入url之后发生的事情来做知识的总结和扩展。所以文章可能会很杂</p><h2 id="输入地址"><a href="#输入地址" class="headerlink" title="输入地址"></a>输入地址</h2><p>当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 url 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 url，然后给出智能提示，让你可以补全url地址。对于 google的chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 enter，页面就出来了。</p><h2 id="浏览器查找域名的-IP-地址"><a href="#浏览器查找域名的-IP-地址" class="headerlink" title="浏览器查找域名的 IP 地址　"></a>浏览器查找域名的 IP 地址　</h2><p>1、请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。</p><p>2、如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS服务器 。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。</p><p>3、查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询。</p><p>4、根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。</p><p>5、本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。</p><p>6、最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。<br>下面这张图很完美的解释了这一过程：</p><blockquote><ul><li>知识扩展：</li></ul></blockquote><h3 id="什么是DNS？"><a href="#什么是DNS？" class="headerlink" title="什么是DNS？"></a>什么是DNS？</h3><p>DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。<br>通俗的讲，我们更习惯于记住一个网站的名字，比如<a href="http://www.baidu.com,而不是记住它的ip地址，比如：167.23.10.2。而计算机更擅长记住网站的ip地址，而不是像www.baidu.com等链接。因为，DNS就相当于一个电话本，比如你要找www.baidu.com这个域名，那我翻一翻我的电话本，我就知道，哦，它的电话（ip）是167.23.10.2。" target="_blank" rel="noopener">www.baidu.com,而不是记住它的ip地址，比如：167.23.10.2。而计算机更擅长记住网站的ip地址，而不是像www.baidu.com等链接。因为，DNS就相当于一个电话本，比如你要找www.baidu.com这个域名，那我翻一翻我的电话本，我就知道，哦，它的电话（ip）是167.23.10.2。</a></p><h3 id="DNS查询的两种方式：递归查询和迭代查询"><a href="#DNS查询的两种方式：递归查询和迭代查询" class="headerlink" title="DNS查询的两种方式：递归查询和迭代查询"></a>DNS查询的两种方式：递归查询和迭代查询</h3><blockquote><p>递归解析<br> 当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。</p></blockquote><blockquote><p>迭代解析<br>当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。比如说：baidu.com的服务器ip地址在192.168.4.5这里，你自己去查吧，本人比较忙，只能帮你到这里了。</p></blockquote><h3 id="DNS域名称空间的组织方式"><a href="#DNS域名称空间的组织方式" class="headerlink" title="DNS域名称空间的组织方式"></a>DNS域名称空间的组织方式</h3><p> 我们在前面有说到根DNS服务器，域DNS服务器，这些都是DNS域名称空间的组织方式。按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例</p><h3 id="DNS负载均衡"><a href="#DNS负载均衡" class="headerlink" title="DNS负载均衡"></a>DNS负载均衡</h3><p>当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用DNS负载均衡技术，它的原理是在DNS服务器中为同一个主机名配置多个IP地址,在应答DNS查询时,DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等</p><h2 id="浏览器向-web-服务器发送一个-HTTP-请求"><a href="#浏览器向-web-服务器发送一个-HTTP-请求" class="headerlink" title="浏览器向 web 服务器发送一个 HTTP 请求"></a>浏览器向 web 服务器发送一个 HTTP 请求</h2><p>拿到域名对应的IP地址之后，浏览器会以一个随机端口（1024&lt;端口&lt;65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接。</p><p>建立了TCP连接之后，发起一个http请求。一个典型的 http request header 一般需要包括请求的方法，例如 GET 或者 POST 等，不常用的还有 PUT 和 DELETE 、HEAD、OPTION以及 TRACE 方法，一般的浏览器只能发起 GET 或者 POST 请求。<br>客户端向服务器发起http请求的时候，会有一些请求信息，请求信息包含三个部分：</p><blockquote><p>请求方法URI协议/版本<br>请求头(Request Header)<br>请求正文：<br>下面是一个完整的HTTP请求例子：</p><pre class=" language-js"><code class="language-js">GET<span class="token operator">/</span>sample<span class="token punctuation">.</span>jspHTTP<span class="token operator">/</span><span class="token number">1.1</span> Accept<span class="token punctuation">:</span>image<span class="token operator">/</span>gif<span class="token punctuation">.</span>image<span class="token operator">/</span>jpegAccept<span class="token operator">-</span>Language<span class="token punctuation">:</span>zh<span class="token operator">-</span>cnConnection<span class="token punctuation">:</span>Keep<span class="token operator">-</span>AliveHost<span class="token punctuation">:</span>localhostUser<span class="token operator">-</span>Agent<span class="token punctuation">:</span>Mozila<span class="token operator">/</span><span class="token number">4.0</span><span class="token punctuation">(</span>compatible<span class="token punctuation">;</span>MSIE5<span class="token number">.01</span><span class="token punctuation">;</span>Window NT5<span class="token number">.0</span><span class="token punctuation">)</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span>gzip<span class="token punctuation">,</span>deflateusername<span class="token operator">=</span>jinqiao<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1234</span></code></pre><p> 注意：最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。</p></blockquote><p>（1）请求的第一行是“方法URL议/版本”：GET/sample.jsp HTTP/1.1<br>（2）请求头(Request Header)</p><p>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。</p><pre class=" language-js"><code class="language-js">Accept<span class="token punctuation">:</span>image<span class="token operator">/</span>gif<span class="token punctuation">.</span>image<span class="token operator">/</span>jpegAccept<span class="token operator">-</span>Language<span class="token punctuation">:</span>zh<span class="token operator">-</span>cnConnection<span class="token punctuation">:</span>Keep<span class="token operator">-</span>AliveHost<span class="token punctuation">:</span>localhostUser<span class="token operator">-</span>Agent<span class="token punctuation">:</span>Mozila<span class="token operator">/</span><span class="token number">4.0</span><span class="token punctuation">(</span>compatible<span class="token punctuation">:</span>MSIE5<span class="token number">.01</span><span class="token punctuation">:</span>Windows NT5<span class="token number">.0</span><span class="token punctuation">)</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span>gzip<span class="token punctuation">,</span>deflate<span class="token punctuation">.</span></code></pre><p>（3）请求正文</p><p>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息：</p><pre class=" language-js"><code class="language-js">username<span class="token operator">=</span>jinqiao<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1234</span></code></pre><p>1）TCP三次握手<br>第一次握手：客户端A将标志位SYN置为1,随机产生一个值为seq=J（J的取值范围为=1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认；<br>第二次握手：服务端B收到数据包后由标志位SYN=1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态。<br>第三次握手：客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了。</p><p> 2）为什需要三次握手？<br> 《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”<br> 书中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接<br>假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”。主要目的防止server端一直等待，浪费资源。<br>3）TCP四次挥手<br>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</p><p>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。<br>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</p><p>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。<br> 4）为什么建立连接是三次握手，而关闭连接却是四次挥手呢？<br>这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p><h2 id="服务器的永久重定向响应"><a href="#服务器的永久重定向响应" class="headerlink" title="服务器的永久重定向响应"></a>服务器的永久重定向响应</h2><p>服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问“<a href="http://www.google.com/”" target="_blank" rel="noopener">http://www.google.com/”</a> 而非“<a href="http://google.com/”。" target="_blank" rel="noopener">http://google.com/”。</a><br>为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像<a href="http://www.yy.com/和http://yy.com/，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。" target="_blank" rel="noopener">http://www.yy.com/和http://yy.com/，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。</a><br>扩展知识</p><h3 id="301和302的区别。"><a href="#301和302的区别。" class="headerlink" title="301和302的区别。"></a>301和302的区别。</h3><p>301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。<br>他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；<br>302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301</p><h3 id="重定向原因："><a href="#重定向原因：" class="headerlink" title="重定向原因："></a>重定向原因：</h3><p>（1）网站调整（如改变网页目录结构）；<br>（2）网页被移到一个新地址；<br>（3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。</p><p>这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。</p><h3 id="什么时候进行301或者302跳转呢？"><a href="#什么时候进行301或者302跳转呢？" class="headerlink" title="什么时候进行301或者302跳转呢？"></a>什么时候进行301或者302跳转呢？</h3><p> 当一个网站或者网页24—48小时内临时移动到一个新的位置，这时候就要进行302跳转，而使用301跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。<br>清晰明确而言：使用301跳转的大概场景如下：<br>1、域名到期不想续费（或者发现了更适合网站的域名），想换个域名。<br>2、在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。<br>3、空间服务器不稳定，换空间的时候。</p><h2 id="浏览器跟踪重定向地址"><a href="#浏览器跟踪重定向地址" class="headerlink" title="浏览器跟踪重定向地址"></a>浏览器跟踪重定向地址</h2><p> 现在浏览器知道了 “<a href="http://www.google.com/&quot;才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的" target="_blank" rel="noopener">http://www.google.com/&quot;才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的</a></p><h2 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h2><p>经过前面的重重步骤，我们终于将我们的http请求发送到了服务器这里，其实前面的重定向已经是到达服务器了，那么，服务器是如何处理我们的请求的呢？<br>后端从在固定的端口接收到TCP报文开始，它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。<br>一些大一点的网站会将你的请求到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过HTTP协议访问某网站应用服务器，而是先请求到Nginx，Nginx再请求应用服务器，然后将结果返回给客户端，这里Nginx的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。</p><h2 id="服务器返回一个-HTTP-响应"><a href="#服务器返回一个-HTTP-响应" class="headerlink" title="服务器返回一个 HTTP 响应　"></a>服务器返回一个 HTTP 响应　</h2><p>经过前面的6个步骤，服务器收到了我们的请求，也处理我们的请求，到这一步，它会把它的处理结果返回，也就是返回一个HTPP响应。<br>HTTP响应与HTTP请求相似，HTTP响应也由3个部分构成，分别是：</p><blockquote><ul><li>状态行</li><li>响应头(Response Header)</li><li>响应正文<pre class=" language-js"><code class="language-js">HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">200</span> OKDate<span class="token punctuation">:</span> Sat<span class="token punctuation">,</span> <span class="token number">31</span> Dec <span class="token number">2005</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">59</span> GMTContent<span class="token operator">-</span>Type<span class="token punctuation">:</span> text<span class="token operator">/</span>html<span class="token punctuation">;</span>charset<span class="token operator">=</span>ISO<span class="token number">-8859</span><span class="token operator">-</span><span class="token number">1</span> Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">122</span>＜html＞＜head＞＜title＞http＜<span class="token operator">/</span>title＞＜<span class="token operator">/</span>head＞＜body＞＜<span class="token operator">!</span><span class="token operator">--</span> body goes here <span class="token operator">--</span>＞＜<span class="token operator">/</span>body＞＜<span class="token operator">/</span>html＞</code></pre></li><li>状态行：<br>状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。<br>格式:    HTTP-Version Status-Code Reason-Phrase CRLF<br>例如:    HTTP/1.1 200 OK \r\n</li><li><ul><li>协议版本：是用http1.0还是其他版本</li></ul></li><li><ul><li>状态描述：状态描述给出了关于状态代码的简短的文字描述。比如状态代码为200时的描述为 ok</li></ul></li><li><ul><li>状态代码：状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。如下</li></ul></li><li>1xx：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。<br>100 Continue<br>101 Switching Protocols</li><li>2xx：成功状态码，表示服务器已成功接收到请求并进行处理。200 OK 表示客户端请求成功<br>204 No Content 成功，但不返回任何实体的主体部分<br>206 Partial Content 成功执行了一个范围（Range）请求</li><li>3xx：重定向状态码，表示服务器要求客户端重定向。<br>301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL<br>302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源<br>303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源<br>304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存<br>307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现</li><li>4xx：客户端错误状态码，表示客户端的请求有非法内容。<br>400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解<br>401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用<br>403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因<br>404 Not Found 请求的资源不存在，例如，输入了错误的URL</li><li>5xx：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。<br>500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求<br>503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常</li><li>响应头：<br>响应头部：由关键字/值对组成，每行一对，关键字和值用英文冒号”:”分隔，典型的响应头有：</li></ul></blockquote><blockquote><ul><li>响应正文<br>包含着我们需要的一些具体信息，比如cookie，html,image，后端返回的请求数据等等。这里需要注意，响应正文和响应头之间有一行空格，表示响应头的信息到空格为止，下图是fiddler抓到的请求正文，红色框中的：响应正文：</li></ul></blockquote><h2 id="浏览器显示-HTML"><a href="#浏览器显示-HTML" class="headerlink" title="浏览器显示 HTML"></a>浏览器显示 HTML</h2><p>在浏览器没有完整接受全部HTML文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍webkit的渲染过程，下图对应的就是WebKit渲染的过程，这个过程包括：<br>解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</p><h2 id="浏览器发送请求获取嵌入在-HTML-中的资源（如图片、音频、视频、CSS、JS等等）"><a href="#浏览器发送请求获取嵌入在-HTML-中的资源（如图片、音频、视频、CSS、JS等等）" class="headerlink" title="浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）"></a>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）</h2><p>其实这个步骤可以并列在步骤8中，在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件</p><hr><p>参考文献：<br><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006879700</a><br><a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/" target="_blank" rel="noopener">http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/</a><br><a href="http://zrj.me/archives/589" target="_blank" rel="noopener">http://zrj.me/archives/589</a></p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> day </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常用封装函数</title>
      <link href="/2019/10/22/js/"/>
      <url>/2019/10/22/js/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript常用封装函数"><a href="#JavaScript常用封装函数" class="headerlink" title="JavaScript常用封装函数"></a>JavaScript常用封装函数</h3><h4 id="基本运动"><a href="#基本运动" class="headerlink" title="基本运动"></a>基本运动</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">doMove</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>attr<span class="token punctuation">,</span>speed<span class="token punctuation">,</span>target<span class="token punctuation">,</span>endFn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> iCur <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span> obj<span class="token punctuation">,</span> attr <span class="token punctuation">)</span><span class="token punctuation">;</span>        speed <span class="token operator">=</span> iCur <span class="token operator">&lt;=</span> target <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            iCur <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span> obj<span class="token punctuation">,</span> attr <span class="token punctuation">)</span> <span class="token operator">+</span> speed<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>speed <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> iCur <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>speed <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> iCur <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                iCur <span class="token operator">=</span> target<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> iCur <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>iCur <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> endFn <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">endFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="透明度变化"><a href="#透明度变化" class="headerlink" title="透明度变化"></a>透明度变化</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">opacity</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>speed<span class="token punctuation">,</span>target<span class="token punctuation">,</span>endFn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> iCur <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span> obj<span class="token punctuation">,</span> <span class="token string">'opacity'</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>    speed <span class="token operator">=</span> iCur <span class="token operator">&lt;=</span> target <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        iCur <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span> obj<span class="token punctuation">,</span> <span class="token string">'opacity'</span> <span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> speed<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>speed <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> iCur <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>speed <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> iCur <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            iCur <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> iCur <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token string">'alpha(opacity: '</span><span class="token operator">+</span> iCur <span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>iCur <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> endFn <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">endFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="抖动"><a href="#抖动" class="headerlink" title="抖动"></a>抖动</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shake</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>attr<span class="token punctuation">,</span>endFn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">-</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    obj<span class="token punctuation">.</span>shake <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> pos <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>shake<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> endFn <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token punctuation">)</span><span class="token function">endFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="获取计算后的样式"><a href="#获取计算后的样式" class="headerlink" title="获取计算后的样式"></a>获取计算后的样式</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span> obj <span class="token punctuation">,</span>attr <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>currentStyle <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="获取计算后的样式并且赋值"><a href="#获取计算后的样式并且赋值" class="headerlink" title="获取计算后的样式并且赋值"></a>获取计算后的样式并且赋值</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>attr<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attr<span class="token operator">==</span><span class="token string">"opacity"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">'opacity'</span><span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">'filter'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"alpha(opacity="</span><span class="token operator">+</span>val<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        iVal<span class="token operator">=</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attr<span class="token operator">==</span><span class="token string">"opacity"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            iVal<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>iVal<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> iVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="DOM下常用封装函数"><a href="#DOM下常用封装函数" class="headerlink" title="DOM下常用封装函数"></a>DOM下常用封装函数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getPrev</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token operator">!</span>obj<span class="token punctuation">.</span>previousSibling <span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先处理obj不是真值或者没有上一个兄弟节点的情况。</span>    <span class="token keyword">return</span> obj<span class="token punctuation">.</span>previousSibling<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> obj<span class="token punctuation">.</span>previousSibling <span class="token punctuation">:</span> <span class="token function">getPrev</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>previousSibling <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//递归</span>    <span class="token comment" spellcheck="true">//不断往上一层一层地找元素节点，直到找到或者返回Null为止。</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getNext</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token operator">!</span>obj<span class="token punctuation">.</span>nextSibling <span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先处理obj不是真值或者没有下一个兄弟节点的情况。</span>    <span class="token keyword">return</span> obj<span class="token punctuation">.</span>nextSibling<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> obj<span class="token punctuation">.</span>nextSibling <span class="token punctuation">:</span> <span class="token function">getNext</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>nextSibling <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归</span>    <span class="token comment" spellcheck="true">//不断往下一层一层地找元素节点，直到找到或者返回Null为止。</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getFirst</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token operator">!</span>obj<span class="token punctuation">.</span>firstChild <span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先处理obj不是真值或者没有第一个兄弟节点的情况。</span>    <span class="token keyword">return</span> obj<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> obj<span class="token punctuation">.</span>firstChild <span class="token punctuation">:</span> <span class="token function">getNext</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>firstChild <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归</span>    <span class="token comment" spellcheck="true">//如果第一个子节点不是元素节点，就以第一个子节点为当前节点，查找下一个兄弟节点。</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getLast</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token operator">!</span>obj<span class="token punctuation">.</span>lastChild <span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先处理obj不是真值或者没有最后一个兄弟节点的情况。</span>    <span class="token keyword">return</span> obj<span class="token punctuation">.</span>lastChild<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> obj<span class="token punctuation">.</span>lastChild <span class="token punctuation">:</span> <span class="token function">getPrev</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>lastChild <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归</span>    <span class="token comment" spellcheck="true">//如果第一个子节点不是元素节点，就以第一个子节点为当前节点，查找下一个兄弟节点。</span><span class="token punctuation">}</span></code></pre><h3 id="获取元素在当前页面中的绝对位置"><a href="#获取元素在当前页面中的绝对位置" class="headerlink" title="获取元素在当前页面中的绝对位置"></a>获取元素在当前页面中的绝对位置</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">posLeft</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> iLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>        iLeft <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>        obj <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> iLeft<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">posTop</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> iTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>        iTop <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        obj <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> iTop<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS判断客户端是否是iOS或者Android</title>
      <link href="/2019/10/16/tool/"/>
      <url>/2019/10/16/tool/</url>
      
        <content type="html"><![CDATA[<h3 id="JS判断客户端是否是iOS或者Android"><a href="#JS判断客户端是否是iOS或者Android" class="headerlink" title="JS判断客户端是否是iOS或者Android"></a>JS判断客户端是否是iOS或者Android</h3><p>每个客户端都带有自身的UA标识，通过JavaScript，可以获取客户端标识，我们可以获取浏览器的userAgent，用正则来判断手机是ios（苹果）还是Android（安卓）客户端。代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> u <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span><span class="token keyword">var</span> isAndroid <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Android'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Adr'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//android终端</span><span class="token keyword">var</span> isiOS <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>u<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ios终端</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'是否是Android：'</span><span class="token operator">+</span>isAndroid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'是否是iOS：'</span><span class="token operator">+</span>isiOS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="浏览器检查函数"><a href="#浏览器检查函数" class="headerlink" title="浏览器检查函数"></a>浏览器检查函数</h3><p>你可以检查是否是移动端（Mobile）、ipad、iphone、微信、QQ等。代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//判断访问终端</span><span class="token keyword">var</span> browser<span class="token operator">=</span><span class="token punctuation">{</span>    versions<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> u <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">,</span> app <span class="token operator">=</span> navigator<span class="token punctuation">.</span>appVersion<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            trident<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Trident'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//IE内核</span>            presto<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Presto'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//opera内核</span>            webKit<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'AppleWebKit'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//苹果、谷歌内核</span>            gecko<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Gecko'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'KHTML'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//火狐内核</span>            mobile<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>u<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/AppleWebKit.*Mobile.*/</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否为移动终端</span>            ios<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>u<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//ios终端</span>            android<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Android'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Adr'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//android终端</span>            iPhone<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'iPhone'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否为iPhone或者QQHD浏览器</span>            iPad<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'iPad'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否iPad</span>            webApp<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Safari'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否web应该程序，没有头部与底部</span>            weixin<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'MicroMessenger'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否微信 （2015-01-22新增）</span>            qq<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\sQQ/i</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">" qq"</span> <span class="token comment" spellcheck="true">//是否QQ</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    language<span class="token punctuation">:</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>browserLanguage <span class="token operator">||</span> navigator<span class="token punctuation">.</span>language<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>使用方法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//判断是否IE内核</span><span class="token keyword">if</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>trident<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"is IE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断是否webKit内核</span><span class="token keyword">if</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>webKit<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"is webKit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断是否移动端</span><span class="token keyword">if</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>mobile<span class="token operator">||</span>browser<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>android<span class="token operator">||</span>browser<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>ios<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"移动端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>检测浏览器语言:</p><pre class=" language-js"><code class="language-js">currentLang <span class="token operator">=</span> navigator<span class="token punctuation">.</span>language<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//判断除IE外其他浏览器使用语言</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>currentLang<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断IE浏览器使用语言</span>    currentLang <span class="token operator">=</span> navigator<span class="token punctuation">.</span>browserLanguage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>currentLang<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS判断客户端是否是iOS或者Android</title>
      <link href="/2019/10/16/app/"/>
      <url>/2019/10/16/app/</url>
      
        <content type="html"><![CDATA[<h3 id="JS判断客户端是否是iOS或者Android"><a href="#JS判断客户端是否是iOS或者Android" class="headerlink" title="JS判断客户端是否是iOS或者Android"></a>JS判断客户端是否是iOS或者Android</h3><p>每个客户端都带有自身的UA标识，通过JavaScript，可以获取客户端标识，我们可以获取浏览器的userAgent，用正则来判断手机是ios（苹果）还是Android（安卓）客户端。代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> u <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span><span class="token keyword">var</span> isAndroid <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Android'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Adr'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//android终端</span><span class="token keyword">var</span> isiOS <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>u<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ios终端</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'是否是Android：'</span><span class="token operator">+</span>isAndroid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'是否是iOS：'</span><span class="token operator">+</span>isiOS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="浏览器检查函数"><a href="#浏览器检查函数" class="headerlink" title="浏览器检查函数"></a>浏览器检查函数</h3><p>你可以检查是否是移动端（Mobile）、ipad、iphone、微信、QQ等。代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//判断访问终端</span><span class="token keyword">var</span> browser<span class="token operator">=</span><span class="token punctuation">{</span>    versions<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> u <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">,</span> app <span class="token operator">=</span> navigator<span class="token punctuation">.</span>appVersion<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            trident<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Trident'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//IE内核</span>            presto<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Presto'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//opera内核</span>            webKit<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'AppleWebKit'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//苹果、谷歌内核</span>            gecko<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Gecko'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'KHTML'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//火狐内核</span>            mobile<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>u<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/AppleWebKit.*Mobile.*/</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否为移动终端</span>            ios<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>u<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//ios终端</span>            android<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Android'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Adr'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//android终端</span>            iPhone<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'iPhone'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否为iPhone或者QQHD浏览器</span>            iPad<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'iPad'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否iPad</span>            webApp<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Safari'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否web应该程序，没有头部与底部</span>            weixin<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'MicroMessenger'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否微信 （2015-01-22新增）</span>            qq<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\sQQ/i</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">" qq"</span> <span class="token comment" spellcheck="true">//是否QQ</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    language<span class="token punctuation">:</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>browserLanguage <span class="token operator">||</span> navigator<span class="token punctuation">.</span>language<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>使用方法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//判断是否IE内核</span><span class="token keyword">if</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>trident<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"is IE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断是否webKit内核</span><span class="token keyword">if</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>webKit<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"is webKit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断是否移动端</span><span class="token keyword">if</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>mobile<span class="token operator">||</span>browser<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>android<span class="token operator">||</span>browser<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>ios<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"移动端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>检测浏览器语言:</p><pre class=" language-js"><code class="language-js">currentLang <span class="token operator">=</span> navigator<span class="token punctuation">.</span>language<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//判断除IE外其他浏览器使用语言</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>currentLang<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断IE浏览器使用语言</span>    currentLang <span class="token operator">=</span> navigator<span class="token punctuation">.</span>browserLanguage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>currentLang<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> app </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>blog主题定制（matery）</title>
      <link href="/2019/09/29/blog/"/>
      <url>/2019/09/29/blog/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>本站所用主题<code>matery</code>，最近整理了一下配置，改一些美化相关的东西，根据个人喜好定制，如有瑕疵还请说明<br><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>仓库地址，这里再次感谢作者的开源。</p><h2 id="个性化定制"><a href="#个性化定制" class="headerlink" title="个性化定制"></a>个性化定制</h2><p>根据个人喜好完成定制</p><h2 id="初始化定制"><a href="#初始化定制" class="headerlink" title="初始化定制"></a>初始化定制</h2><p><a href="https://github.com/ght5935/HexoCode/blob/master/themes/hexo-theme-matery/README_CN.md" target="_blank" rel="noopener">中文初始配置文档</a></p><blockquote><ul><li>新建分类 categories 页</li><li>新建标签 tags 页</li><li>新建关于我 about 页</li><li>新建留言板 contact 页（可选的）</li><li>新建友情连接 friends 页（可选的）</li><li>添加emoji表情支持（可选的）</li><li>代码高亮</li><li>搜索</li><li>文章字数统计插件（可选的）</li><li>添加 RSS 订阅支持（可选的）</li><li>在线聊天功能（可选的）</li><li>修改社交链接</li><li>修改页脚</li><li>打赏的二维码图片</li><li>配置音乐播放器（可选的）</li></ul></blockquote><h2 id="自定义个性化修改"><a href="#自定义个性化修改" class="headerlink" title="自定义个性化修改"></a>自定义个性化修改</h2><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><p>修改新建文章模板<code>/scaffolds/post.md</code></p><pre class=" language-js"><code class="language-js"><span class="token operator">--</span><span class="token operator">-</span>title<span class="token punctuation">:</span> 文章标题date<span class="token punctuation">:</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">00</span>author<span class="token punctuation">:</span> echo丶若梦img<span class="token punctuation">:</span> <span class="token operator">/</span>source<span class="token operator">/</span>images<span class="token operator">/</span>xxx<span class="token punctuation">.</span>jpgtop<span class="token punctuation">:</span> <span class="token boolean">true</span>cover<span class="token punctuation">:</span> <span class="token boolean">true</span>coverImg<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">.</span>jpgpassword<span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc<span class="token punctuation">:</span> <span class="token boolean">false</span>mathjax<span class="token punctuation">:</span> <span class="token boolean">false</span>summary<span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories<span class="token punctuation">:</span> Jstags<span class="token punctuation">:</span>  <span class="token operator">-</span> React  <span class="token operator">-</span> Dva<span class="token operator">--</span><span class="token operator">-</span></code></pre><blockquote><ul><li>Front-matter 选项详解<br>Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。<table><thead><tr><th>配置选项</th><th align="right">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td>title</td><td align="right">文件名（标题）</td><td align="center">文章标题，强烈建议填写此选项</td></tr><tr><td>data</td><td align="right">文件创建时的日期时间</td><td align="center">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td align="right">根 _config.yml 中的 autho</td><td align="center">文章作者</td></tr><tr><td>img</td><td align="right">featureImages 中的某个值</td><td align="center">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg" target="_blank" rel="noopener">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td align="right">true</td><td align="center">推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td align="right">false</td><td align="center">v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td align="right">无</td><td align="center">v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td align="right">无</td><td align="center">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td align="right">true</td><td align="center">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td align="right">false</td><td align="center">是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td align="right">无</td><td align="center">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td align="right">无</td><td align="center">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td align="right">无</td><td align="center">文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td align="right">无</td><td align="center">文章转载规则，可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table></li></ul></blockquote><h3 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h3><p>原来的主题没有404页面，我们加一个。首先在<code>/source/</code>目录下新建一个404.md，内容如下：</p><pre class=" language-js"><code class="language-js">title<span class="token punctuation">:</span> <span class="token number">404</span>date<span class="token punctuation">:</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">5</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">10</span>type<span class="token punctuation">:</span> <span class="token string">"404"</span>layout<span class="token punctuation">:</span> <span class="token string">"404"</span>description<span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span></code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个404.ejs文件，内容如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">/* don't remove. */</span>    <span class="token punctuation">.</span>about<span class="token operator">-</span>cover <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> 75vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bg-cover pd-header about-cover"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s10 offset-s1 m8 offset-m2 l8 offset-l2"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"brand"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span><span class="token operator">></span> <span class="token number">404</span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"description center-align"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> page<span class="token punctuation">.</span>description <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 随机切换</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="关于”页面增加简历（可选）"><a href="#关于”页面增加简历（可选）" class="headerlink" title="关于”页面增加简历（可选）"></a>关于”页面增加简历（可选）</h3><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;标签，然后找到它对应的&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content article-card-content"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"zoom-in-up"</span><span class="token operator">></span> <span class="token operator">&lt;</span>i                        <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-address-book"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'myCV'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"articleContent"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>这样就会多出一张card，然后可以在/source/about/index.md下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card</p><h3 id="定制-banner-图和文章特色图"><a href="#定制-banner-图和文章特色图" class="headerlink" title="定制 banner 图和文章特色图"></a>定制 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 banner 图片，每次刷新随机切换。<br>banner图 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <script></script> 代码中：（banner 如图片数量 5 就是<code>Math.random()*5</code>）</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。</p><h3 id="去掉首页banner的背景颜色"><a href="#去掉首页banner的背景颜色" class="headerlink" title="去掉首页banner的背景颜色"></a>去掉首页banner的背景颜色</h3><p>打开<code>themes/matery/source/css/matery.css</code>文件(367行，也可以快速搜索.bg-cover:after进行定位):<br>然后注释掉这两行css</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-cover</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* -webkit-animation: rainbow 60s infinite;    animation: rainbow 60s infinite; */</span><span class="token punctuation">}</span></code></pre><h3 id="将分类页合并到-标签页"><a href="#将分类页合并到-标签页" class="headerlink" title="将分类页合并到 标签页"></a>将分类页合并到 标签页</h3><p>首先在主题的配置文件_config.yml中找到menu项，注释掉Categories</p><pre class=" language-js"><code class="language-js">  # Categories<span class="token punctuation">:</span>  #   url<span class="token punctuation">:</span> <span class="token operator">/</span>categories  #   icon<span class="token punctuation">:</span> fa<span class="token operator">-</span>bookmark</code></pre><p>打开layout/categories.ejs把内容（文章分类）复制粘贴到layout/tags.ejs中去<br><code>&lt;%- partial(&#39;_widget/category-cloud&#39;) %&gt;</code><br>打开layout/about.ejs把第46行（文章统计图）剪切粘贴到layout/tags.ejs中去<br><code>&lt;%- partial(&#39;_widget/post-charts&#39;) %&gt;</code><br>整理后的tags.ejs文档内容:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/bg-cover'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/tag-cloud'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/category-cloud'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>tags <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/tag-wordcloud'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 文章分类雷达图 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>categories <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/category-radar'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 文章统计图 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/post-charts'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span></code></pre><h3 id="修改导航栏和页脚渐变色"><a href="#修改导航栏和页脚渐变色" class="headerlink" title="修改导航栏和页脚渐变色"></a>修改导航栏和页脚渐变色</h3><p>打开<code>themes/matery/source/css/matery.css</code>文件(165行):<br>然后注释掉这两行css</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#bf30ac</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="给博客增加动态标签"><a href="#给博客增加动态标签" class="headerlink" title="给博客增加动态标签"></a>给博客增加动态标签</h3><p>打开博客路径<code>themes/matery/layout/layout.ejs</code> 在前添加如下代码即可</p><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span> st<span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"看不见我🙈~看不见我🙈~"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"(๑•̀ㅂ•́) ✧被发现了～"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>修改<code>/themes/matery/source/js</code>中的<code>matery.js</code>文件</p><pre class=" language-js"><code class="language-js">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#articleContent, #myGallery'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lightGallery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            selector<span class="token punctuation">:</span> <span class="token string">'.img-item'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 启用字幕</span>            subHtmlSelectorRelative<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><ul><li>再装个插件<br><code>npm install hexo-lazyload-image --save</code><br>在博客根目录配置.yml文件加入对应字段，如下：<pre class=" language-js"><code class="language-js">lazyload<span class="token punctuation">:</span>enable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 如果为真，则只有文章或页面中的图像支持延迟加载。</span><span class="token comment" spellcheck="true">// 如果为假，整个网站的图像将使用惰性加载，包括来自主题的图像，但不包括来自CSS样式的背景图像。</span>onlypost<span class="token punctuation">:</span> <span class="token boolean">true</span>loadingImg<span class="token punctuation">:</span> <span class="token operator">/</span>loading<span class="token punctuation">.</span>gif</code></pre>这里的<code>loading.gif</code>我放在了<code>/themes/matery/source</code>目录上<br>这样就可以实现图片懒加载</li></ul></blockquote><h3 id="增加动态诗词"><a href="#增加动态诗词" class="headerlink" title="增加动态诗词"></a>增加动态诗词</h3><p>我们采用今日诗词的每日一句：<br>首先在<code>/themes/hexo-theme-matery/layout/_partial/head.ejs</code>增加代码：<br><code>&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code><br>然后打开<code>/themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs</code><br>把<code>&lt;%= config.description %&gt;</code>改为<code>&lt;%- &#39;&lt;span id=&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt;&#39; %&gt;</code><br>如果要弃用动态诗词，直接改回原文件即可。</p><h3 id="添加评论插件"><a href="#添加评论插件" class="headerlink" title="添加评论插件"></a>添加评论插件</h3><p>由于这个主题自带了<code>gittalk</code>、<code>gitment</code>、<code>valine</code>等评论插件，所以我们只需要对应插件参数就行了，这个博客用的是<code>gittalk</code></p><pre class=" language-css"><code class="language-css"><span class="token property">gitalk</span><span class="token punctuation">:</span>  <span class="token property">enable</span><span class="token punctuation">:</span> true  <span class="token property">owner</span><span class="token punctuation">:</span> 仓库拥有者  <span class="token property">repo</span><span class="token punctuation">:</span> 仓库名称  <span class="token property">oauth</span><span class="token punctuation">:</span>    <span class="token property">clientId</span><span class="token punctuation">:</span> Client ID    <span class="token property">clientSecret</span><span class="token punctuation">:</span> Client Secret  <span class="token property">admin</span><span class="token punctuation">:</span>  GitHub repository 的所有者和合作者 </code></pre><p>当然也可以用其他评论插件，只需要配置对应项就是了</p><h3 id="背景动态彩带"><a href="#背景动态彩带" class="headerlink" title="背景动态彩带"></a>背景动态彩带</h3><p>这个效果是主题带有的只需在<code>/themes/hexo-theme-matery/_config.yml</code>文件，定位到<code>ribbon_dynamic</code></p><pre class=" language-js"><code class="language-js">ribbon_dynamic<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre><h3 id="背景静止彩带"><a href="#背景静止彩带" class="headerlink" title="背景静止彩带"></a>背景静止彩带</h3><p>这个效果是主题带有的只需在<code>/themes/hexo-theme-matery/_config.yml</code>文件，定位到<code>ribbon</code></p><pre class=" language-js"><code class="language-js">ribbon<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  size<span class="token punctuation">:</span> <span class="token number">150</span> # 彩带大小<span class="token punctuation">,</span> 默认<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">.</span>  alpha<span class="token punctuation">:</span> <span class="token number">0.6</span> # 彩带透明度 <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 默认<span class="token punctuation">:</span> <span class="token number">0.6</span><span class="token punctuation">.</span>  zIndex<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span> # 背景的z<span class="token operator">-</span>index属性，css属性用于控制所在层的位置<span class="token punctuation">,</span> 默认<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>  click_to_change<span class="token punctuation">:</span> <span class="token boolean">false</span>  # 设置是否每次点击都更换彩带<span class="token punctuation">.</span></code></pre><h3 id="背景粒子"><a href="#背景粒子" class="headerlink" title="背景粒子"></a>背景粒子</h3><p>这个效果是主题带有的只需在<code>/themes/hexo-theme-matery/_config.yml</code>文件，定位到<code>canvas_nest</code></p><pre class=" language-js"><code class="language-js">canvas_nest<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  color<span class="token punctuation">:</span> <span class="token string">'78, 238, 148'</span> # 线条颜色<span class="token punctuation">,</span> 默认<span class="token punctuation">:</span> <span class="token string">'0,0,0'</span> <span class="token function">；三个数字分别为</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span>G<span class="token punctuation">,</span>B<span class="token punctuation">)</span>，注意用<span class="token punctuation">,</span>分割  pointColor<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span> # 交点颜色<span class="token punctuation">,</span> 默认<span class="token punctuation">:</span> <span class="token string">'0,0,0'</span> <span class="token function">；三个数字分别为</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span>G<span class="token punctuation">,</span>B<span class="token punctuation">)</span>，注意用<span class="token punctuation">,</span>分割  opacity<span class="token punctuation">:</span> <span class="token number">0.7</span> # 线条透明度（<span class="token number">0</span><span class="token operator">~</span><span class="token number">1</span>）<span class="token punctuation">,</span> 默认<span class="token punctuation">:</span> <span class="token number">0.5</span>  zIndex<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span> # 背景的 z<span class="token operator">-</span>index 属性，css 属性用于控制所在层的位置<span class="token punctuation">,</span> 默认<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>  count<span class="token punctuation">:</span> <span class="token number">99</span> # 线条的总数量<span class="token punctuation">,</span> 默认<span class="token punctuation">:</span> <span class="token number">99</span></code></pre><h3 id="点击爱心"><a href="#点击爱心" class="headerlink" title="点击爱心"></a>点击爱心</h3><p>这个效果是主题带有的只需在<code>/themes/hexo-theme-matery/_config.yml</code>文件，定位到<code>clicklove</code></p><pre class=" language-js"><code class="language-js">clicklove<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre><p>默认是开启状态</p><h3 id="添加博客天气插件"><a href="#添加博客天气插件" class="headerlink" title="添加博客天气插件"></a>添加博客天气插件</h3><p>点击<a href="https://cj.weather.com.cn/plugin/pc" target="_blank" rel="noopener">中国天气网</a><br>选择自定义插件—&gt;自定义样式——&gt;生成代码，然后会生成这样一段代码</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'1IJzWqjceC'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"https://apip.weatherdt.com/float/static/js/r.js?v=1111"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>在 <code>/themes/matery/source/layout/_widget</code> 新建文件 weather.ejs，把上面生成的代码添加进入,可以设置只有桌面端显示,如下修改:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 天气接口 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'1IJzWqjceC'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//只在桌面版网页启用特效 </span>    <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="https://apip.weatherdt.com/float/static/js/r.js?v=1111">&lt;"/"script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>然后在 <code>/themes/matery/layout/_partial/layout.ejs</code> 中添加如下代码：</p><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 天气接口控件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>weather<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/weather'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>在主题配置文件 <code>/themes/hexo-theme-matery/_config.yml</code>中配置:</p><pre class=" language-js"><code class="language-js"># 天气接口插件weather<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre><h3 id="添加雪花飘落动效"><a href="#添加雪花飘落动效" class="headerlink" title="添加雪花飘落动效"></a>添加雪花飘落动效</h3><p>在 <code>/themes/matery/source/js</code> 新建文件 snow.js，并添加如下代码<br>并复制<a href="https://github.com/ght5935/HexoCode/blob/master/themes/hexo-theme-matery/source/js/snow.js" target="_blank" rel="noopener">snow.js</a>内容到snow.js<br>然后在<code>/themes/matery/layout/layout.ejs</code>中添加如下代码：</p><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>snow<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="/js/snow.js">&lt;"/"script>'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>在主题配置文件 <code>/themes/hexo-theme-matery/_config.yml</code>中配置:</p><pre class=" language-js"><code class="language-js">  # 背景雪花效果<span class="token punctuation">.</span>snow<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre><h3 id="添加樱花飘落动效"><a href="#添加樱花飘落动效" class="headerlink" title="添加樱花飘落动效"></a>添加樱花飘落动效</h3><p>在 <code>/themes/matery/source/js</code> 新建文件 sakura.js，并添加如下代码<br>并复制<a href="https://github.com/ght5935/HexoCode/blob/master/themes/hexo-theme-matery/source/js/sakura.js" target="_blank" rel="noopener">sakura.js</a>内容到sakura.js<br>然后在<code>/themes/matery/layout/layout.ejs</code>中添加如下代码：</p><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>sakura<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token comment" spellcheck="true">//只在桌面版网页（首页）启用特效</span>        <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">==</span> <span class="token string">'https://ght5935.github.io/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="/js/sakura.js">&lt;"/"script>'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>在主题配置文件 <code>/themes/hexo-theme-matery/_config.yml</code>中配置:</p><pre class=" language-js"><code class="language-js">  # 背景樱花飘落动效<span class="token punctuation">.</span>sakura<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre><h3 id="添加鼠标滑过动效"><a href="#添加鼠标滑过动效" class="headerlink" title="添加鼠标滑过动效"></a>添加鼠标滑过动效</h3><p>在 <code>/themes/matery/source/js</code> 新建文件 mouseSlip.js，并添加如下代码<br>并复制<a href="https://github.com/ght5935/HexoCode/blob/master/themes/hexo-theme-matery/source/js/mouseSlip.js" target="_blank" rel="noopener">sakura.js</a>内容到mouseSlip.js<br>然后在<code>/themes/matery/layout/layout.ejs</code>中添加如下代码：</p><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>mouseSlip<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/mouseSlip.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>在主题配置文件 <code>/themes/hexo-theme-matery/_config.yml</code>中配置:</p><pre class=" language-js"><code class="language-js">  # 页面鼠标滑过动效mouseSlip<span class="token punctuation">:</span>    enable<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器上搭建node</title>
      <link href="/2019/09/25/node/"/>
      <url>/2019/09/25/node/</url>
      
        <content type="html"><![CDATA[<h2 id="在服务器上安装Nodejs"><a href="#在服务器上安装Nodejs" class="headerlink" title="在服务器上安装Nodejs"></a>在服务器上安装Nodejs</h2><hr><h3 id="使用命令行登录到服务器上"><a href="#使用命令行登录到服务器上" class="headerlink" title="使用命令行登录到服务器上"></a>使用命令行登录到服务器上</h3><pre class=" language-js"><code class="language-js">ssh userName@remoteAddress          <span class="token comment" spellcheck="true">// ssh root@192.168.1.26</span></code></pre><h3 id="查看服务器系统的位数信息"><a href="#查看服务器系统的位数信息" class="headerlink" title="查看服务器系统的位数信息"></a>查看服务器系统的位数信息</h3><pre class=" language-js"><code class="language-js">uname <span class="token operator">-</span>a<span class="token comment" spellcheck="true">// Linux linux 3.13.0-65-generic #106-Ubuntu SMP Fri Oct 2 22:08:27 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre><h3 id="切换环境到安装目录"><a href="#切换环境到安装目录" class="headerlink" title="切换环境到安装目录"></a>切换环境到安装目录</h3><p>这里我们在根目录下新建一个叫做app的文件夹，将Nodejs安装到这个文件夹里</p><pre class=" language-js"><code class="language-js">cd <span class="token operator">/</span>    mkdir app <span class="token operator">&amp;&amp;</span> cd app </code></pre><h3 id="Nodejs的下载与安装"><a href="#Nodejs的下载与安装" class="headerlink" title="Nodejs的下载与安装"></a>Nodejs的下载与安装</h3><p>进入<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Nodejs官网</a>的下载页<br>找到自己需要的Nodejs版本我这里是<a href="https://npm.taobao.org/mirrors/node/v8.9.3/node-v8.9.3-linux-x64.tar.xz" target="_blank" rel="noopener">Linux64位v8.9.3</a></p><h4 id="下载Nodejs·"><a href="#下载Nodejs·" class="headerlink" title="下载Nodejs·"></a>下载Nodejs·</h4><pre class=" language-js"><code class="language-js">wget 资源链接地址</code></pre><h4 id="解压资源包"><a href="#解压资源包" class="headerlink" title="解压资源包"></a>解压资源包</h4><pre class=" language-js"><code class="language-js">tar <span class="token operator">-</span>xvf 刚下载的压缩包名称</code></pre><h4 id="重命名解压后的资源包"><a href="#重命名解压后的资源包" class="headerlink" title="重命名解压后的资源包"></a>重命名解压后的资源包</h4><pre class=" language-js"><code class="language-js">mv 解压后的资源包名 nodejs</code></pre><h4 id="确认过程无误"><a href="#确认过程无误" class="headerlink" title="确认过程无误"></a>确认过程无误</h4><p>确定nodejs的bin目录下，有node和npm两个文件，如果有，那么说明我们前面的步骤都没有问题。（没有的话要么是下载的资源有问题，要么是解压出现问题了）</p><h3 id="建立全局链接"><a href="#建立全局链接" class="headerlink" title="建立全局链接"></a>建立全局链接</h3><p>现在我们的nodejs虽然已经安装成功了，但是还不能全局使用node命令，需要建立软连接，使其变为全</p><pre class=" language-js"><code class="language-js">ln <span class="token operator">-</span>s <span class="token operator">/</span>app<span class="token operator">/</span>nodejs<span class="token operator">/</span>bin<span class="token operator">/</span>npm <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token regex">/bin/</span>ln <span class="token operator">-</span>s <span class="token operator">/</span>app<span class="token operator">/</span>nodejs<span class="token operator">/</span>bin<span class="token operator">/</span>node <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token regex">/bin/</span></code></pre><p>这样，我们就大功告成了，你可以在任何地方通过</p><pre class=" language-js"><code class="language-js">node <span class="token operator">-</span>vnpm <span class="token operator">-</span>v</code></pre><p>进行测试是否安装成功</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 一键部署</title>
      <link href="/2019/09/12/hexo/"/>
      <url>/2019/09/12/hexo/</url>
      
        <content type="html"><![CDATA[<p>hexo+github建站博客的教程网上的资料已经很成熟了，很多没有服务器小伙伴大多用hexo+github来搭建博客的， 为了方便部署发布文章，这里写了一个 一键部署的脚本</p><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><blockquote><ul><li>hexo clean<br>  清除缓存文件 db.json 和已生成的静态文件 public, 网站显示异常时可以执行这条命令试试</li><li>hexo s<br>  启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></li><li>hexo new [name]<br>  新建一篇标题为 [name] 的文章,文件一般在source/_post文件夹下</li><li>hexo g<br>  生成网站静态文件到默认设置的 public 文件夹</li><li>hexo d<br>  自动生成网站静态文件，并部署到设定的仓库。</li></ul></blockquote><h3 id="正常部署"><a href="#正常部署" class="headerlink" title="正常部署"></a>正常部署</h3><p>在项目打开git base here</p><pre class=" language-js"><code class="language-js"> hexo clean hexo g hexo d</code></pre><p>或者</p><pre class=" language-js"><code class="language-js"> hexo clean hexo g <span class="token operator">-</span>d</code></pre><h3 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h3><ul><li><p>新建一个r.sh的文件</p></li><li><p>把下方代码复制进去</p></li><li><p>在git上执行 ./r.sh</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span>d <span class="token string">"/public/"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then  hexo clean  echo <span class="token string">"清除完成"</span>  hexo g  echo <span class="token string">"生成模板"</span>  hexo d  echo <span class="token string">"部署完成"</span><span class="token keyword">else</span>  hexo g  echo <span class="token string">"生成模板"</span>  hexo d  echo <span class="token string">"部署完成"</span>fi  git add <span class="token punctuation">.</span>  git commit <span class="token operator">-</span>m <span class="token string">'自动化提交'</span>  git push</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这是一个简易版的一键部署有什么问题，欢迎留言</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除所有cookie及其他操作</title>
      <link href="/2019/09/06/cookie/"/>
      <url>/2019/09/06/cookie/</url>
      
        <content type="html"><![CDATA[<p><code>JavaScript</code>是运行在客户端的脚本，因此一般是不能够设置<code>Session</code>的，因为<code>Session</code>是运行在服务器端的。<br>而<code>cookie</code>是运行在客户端的，所以可以用JS来设置<code>cookie</code>. </p><h3 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> Days <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exp<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Days<span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"="</span><span class="token operator">+</span> escape <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";expires="</span> <span class="token operator">+</span> exp<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> arr<span class="token punctuation">,</span>reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^| )"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"=([^;]*)(;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">=</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">delCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exp<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cval<span class="token operator">=</span><span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cval<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span>cookie<span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"="</span><span class="token operator">+</span>cval<span class="token operator">+</span><span class="token string">";expires="</span><span class="token operator">+</span>exp<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="清除所有cookie"><a href="#清除所有cookie" class="headerlink" title="清除所有cookie"></a>清除所有cookie</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">clearAllCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    date<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> keys<span class="token operator">=</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[^ =;]+(?=\=)/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"需要删除的cookie名字："</span><span class="token operator">+</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span>  keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            document<span class="token punctuation">.</span>cookie<span class="token operator">=</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"=0; expire="</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"; path=/"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 判断文件夹或文件是否存在</title>
      <link href="/2019/09/05/linux/"/>
      <url>/2019/09/05/linux/</url>
      
        <content type="html"><![CDATA[<h3 id="文件夹不存在则创建"><a href="#文件夹不存在则创建" class="headerlink" title="文件夹不存在则创建"></a>文件夹不存在则创建</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token operator">-</span>d <span class="token string">"/data/"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>thenmkdir <span class="token operator">/</span>data<span class="token keyword">else</span><span class="token keyword">echo</span> <span class="token string">"文件夹已经存在"</span>fi</code></pre><h3 id="文件存在则删除"><a href="#文件存在则删除" class="headerlink" title="文件存在则删除"></a>文件存在则删除</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token operator">-</span>f <span class="token string">"/data/filename"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then<span class="token keyword">echo</span> <span class="token string">"文件不存在"</span><span class="token keyword">else</span>rm <span class="token operator">-</span>d <span class="token operator">/</span>data<span class="token operator">/</span>filenamefi</code></pre><h3 id="判断文件夹是否存在"><a href="#判断文件夹是否存在" class="headerlink" title="判断文件夹是否存在"></a>判断文件夹是否存在</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span>d <span class="token string">"/data/"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then<span class="token keyword">echo</span> <span class="token string">"文件夹存在"</span><span class="token keyword">else</span><span class="token keyword">echo</span> <span class="token string">"文件夹不存在"</span>fi</code></pre><h3 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span>f <span class="token string">"/data/filename"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then<span class="token keyword">echo</span> <span class="token string">"文件存在"</span><span class="token keyword">else</span><span class="token keyword">echo</span> <span class="token string">"文件不存在"</span>fi</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正方体效果</title>
      <link href="/2019/09/05/Demo/"/>
      <url>/2019/09/05/Demo/</url>
      
        <content type="html"><![CDATA[<h3 id="正方体效果"><a href="#正方体效果" class="headerlink" title="正方体效果"></a>正方体效果</h3><p><img src="/loading.gif" data-original="http://fech.in/static/images/cover/convert-excel-to-markdown-table.jpeg" alt="正方体"></p><p>理论上、现实世界及3次元世界中的各种有规律的运动效果都可以使用CSS3 transform 3D方法实现。文章最后的旋转效果可以说是各类千奇百怪效果中的沧海一粟<del>~</del>其他各类有的没有的效果还是需要大家自己的大脑去构想。至于实现方面，只要理解了，其实也就都是比较简单的</p><h3 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h3><pre class=" language-css"><code class="language-css">       <span class="token comment" spellcheck="true">/*最外层容器样式*/</span>        <span class="token selector"><span class="token class">.wrap</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*包裹所有容器样式*/</span>        <span class="token selector"><span class="token class">.cube</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>            <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-<span class="token number">3</span>d<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-<span class="token number">30</span>deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-<span class="token number">80</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> rotate linear <span class="token number">20</span>s infinite<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rotate</span> <span class="token punctuation">{</span>            <span class="token selector">from </span><span class="token punctuation">{</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">to </span><span class="token punctuation">{</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> div </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.4</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*定义所有图片样式*/</span>        <span class="token selector"><span class="token class">.pic</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.out_front</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.out_back</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>-<span class="token number">100</span>px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.out_left</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-<span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.out_right</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.out_top</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.out_bottom</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-<span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*定义小正方体样式*/</span>        <span class="token selector"><span class="token class">.cube</span> span </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.in_pic</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.in_front</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.in_back</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>-<span class="token number">50</span>px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.in_left</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-<span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.in_right</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.in_top</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span> <span class="token class">.in_bottom</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-<span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*鼠标移入后样式*/</span>        <span class="token selector"><span class="token class">.cube</span><span class="token pseudo-class">:hover</span> <span class="token class">.out_front</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">200</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span><span class="token pseudo-class">:hover</span> <span class="token class">.out_back</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>-<span class="token number">200</span>px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span><span class="token pseudo-class">:hover</span> <span class="token class">.out_left</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-<span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">200</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span><span class="token pseudo-class">:hover</span> <span class="token class">.out_right</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">200</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span><span class="token pseudo-class">:hover</span> <span class="token class">.out_top</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">200</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cube</span><span class="token pseudo-class">:hover</span> <span class="token class">.out_bottom</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-<span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">200</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="dom结构"><a href="#dom结构" class="headerlink" title="dom结构"></a>dom结构</h3><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- 外层最大容器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--包裹所有元素的容器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cube<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--前面图片 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out_front<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/write-blog-tools.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--后面图片 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out_back<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/convert-excel-to-markdown-table.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--左面图片 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out_left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/pyspark-and-pandas.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--右面图片 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out_right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/ml02-knn.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--上面图片 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out_top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/ml01-overview.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--下面图片 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out_bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/export-excel-use-template.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--小正方体 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_front<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/5-linux-command-surprised.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_back<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/2017-1024.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/tigase-pre-research-1.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/javascript-dom-utils.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/ml02-knn.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://fech.in/static/images/cover/pyspark-and-pandas.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 特效demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客</title>
      <link href="/2019/09/04/hexo-first/"/>
      <url>/2019/09/04/hexo-first/</url>
      
        <content type="html"><![CDATA[<h3 id="用Hexo写出第一篇博客"><a href="#用Hexo写出第一篇博客" class="headerlink" title="用Hexo写出第一篇博客"></a>用Hexo写出第一篇博客</h3><p>经过一段时间的折腾终于用 Hexo + GitHub 搭建起了一个个人博客站点，第一时间边学边写，弄出了这第一篇博客，心里甚是欢喜.<br>Hexo是一款“快速、简洁且高效的博客框架”，支持 Markdown 的所有功能。所以，写出一篇博客必须学习 Hexo 和 Markdown 的使用规则.</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>简单、流行、逼格高，排版功能足够使用</li><li>广泛用于用于办公、文字工作者、程序员等人员日常文档的写作排版</li><li>简单粗暴</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>太简单，很多复杂的专业排版样式功能无法实现，只适用于要求不高的文字排版场合</li><li>简单粗暴</li></ul><h3 id="markDown语法"><a href="#markDown语法" class="headerlink" title="markDown语法"></a>markDown语法</h3><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">基本语法</a>,<br>可以尝试<a href="https://c.runoob.com/front-end/712" target="_blank" rel="noopener">在线编辑</a></p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
